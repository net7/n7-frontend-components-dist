//---------------------------
// CAROUSEL.ts
//---------------------------
import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
var CarouselComponent = /** @class */ (function () {
    function CarouselComponent() {
        var _this = this;
        this.loaded = false;
        /**
         * API of the carousel component
         */
        this.api = {
            /**
             * Used to lazy-load video resources.
             * Call api.load.videos on DOMContentReady event
             */
            load: {
                /** Changes all data-src attributes to src and calls <video>.load() */
                videos: function () {
                    var sources = Array.from(// gets all <source.lazy> tags
                    document.getElementById(_this.data.containerId)
                        .getElementsByClassName('lazy'));
                    sources.forEach(function (source) {
                        var url = source.getAttribute('data-src'); // gets the video url
                        source.classList.remove('lazy'); // removes the lazy class
                        source.setAttribute('src', url); // sets the url to src attribute
                        source.removeAttribute('data-src'); // removes the data-src attribute
                        source.parentElement.load(); // loads the video
                    });
                }
            }
        };
    }
    CarouselComponent.prototype.ngAfterContentChecked = function () {
        var _this = this;
        if (!this.data || this.loaded)
            return;
        this.loaded = true;
        setTimeout(function () {
            var _a = _this.data, containerId = _a.containerId, libOptions = _a.libOptions;
            import('latte-carousel').then(function (module) {
                var Carousel = module.Carousel;
                var chart = new Carousel("#" + containerId, libOptions);
                // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-unused-vars
                if (_this.data.setInstance)
                    _this.data.setInstance(function (d) { d = chart; });
                // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-unused-vars
                if (_this.data.setComponentAPI)
                    _this.data.setComponentAPI(function (d) { d = _this.api; });
                _this.addButtonEvents(_this.data);
            });
        });
    };
    CarouselComponent.prototype.onClick = function (payload) {
        if (!this.emit)
            return;
        this.emit('click', payload);
    };
    /**
     * Function that adds the event listeners to each button.
     * This is needed because when "new Carousel()" is called the event listeners are lost.
     */
    CarouselComponent.prototype.addButtonEvents = function (_a) {
        var _this = this;
        var slides = _a.slides, containerId = _a.containerId;
        // Build array of button-id's & payloads.
        var buttons = slides
            .map(function (slide, slideID) { return ({
            // id = container id - index of the slide
            id: containerId + "-" + slideID,
            payload: (((slide.action || {}).anchor || {}).payload) || undefined
        }); })
            .filter(function (btn) { return btn.payload; });
        // find each button's anchor-wrapper and attach the event to it.
        buttons.forEach(function (btn) {
            document.querySelector("#" + btn.id).parentElement.addEventListener('click', function () { return _this.onClick(btn.payload); });
        });
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CarouselComponent.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CarouselComponent.prototype, "emit", void 0);
    CarouselComponent = __decorate([
        Component({
            selector: 'n7-carousel',
            template: "<button *ngIf=\"data.classes === 'demo'\"\r\n        class=\"n7-btn\"\r\n        (click)=\"api.load.videos()\">api.load.videos()</button>\r\n\r\n<div *ngIf=\"data\"\r\n     class=\"n7-carousel {{ data.classes || '' }}\">\r\n  <!-- Warning: Do not style div.latte-carousel -->\r\n  <div id=\"{{data.containerId}}\"\r\n       class=\"latte-carousel\">\r\n    <ng-container *ngFor=\"let slide of data.slides; let index = index;\">\r\n      <ng-container *ngTemplateOutlet=\"carouselSlide; context:{slide: slide, index: index}\"></ng-container>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<!-- ===== SLIDE WRAPPER ===== -->\r\n<ng-template #carouselSlide\r\n             let-slide=\"slide\"\r\n             let-slideID=\"index\">\r\n  <!-- Warning: Do not style div.latte-item -->\r\n  <div class=\"latte-item\">\r\n    <div class=\"n7-carousel__slide {{ slide.classes || ''}}\"\r\n         [ngClass]=\"{ 'has-image' : slide.background.image, 'has-video': slide.background.video }\"\r\n         [style.background-color]=\"slide.background.color ? slide.background.color : ''\"\r\n         [style.background-image]=\"slide.background.image ? 'url('+slide.background.image+')' : ''\">\r\n      <div class=\"n7-carousel__slide-content-wrapper\">\r\n        <div class=\"n7-carousel__slide-content\">\r\n          <div class=\"n7-carousel__slide-content-left\">\r\n            <ng-container *ngTemplateOutlet=\"slideForeground; context:{items: slide.items, slideID: slideID}\">\r\n            </ng-container>\r\n          </div>\r\n          <div class=\"n7-carousel__slide-content-right\"\r\n               *ngIf=\"slide.action\">\r\n            <n7-anchor-wrapper [data]=\"slide.action.anchor\"\r\n                               (clicked)=\"onClick($event)\">\r\n              <!-- Button ID's are used to dynamically reattach events after loading the carousel -->\r\n              <button id=\"{{data.containerId}}-{{slideID}}\"\r\n                      class=\"n7-hero__btn n7-btn n7-btn-cta n7-btn-l\">\r\n                {{slide.action.text}}\r\n              </button>\r\n            </n7-anchor-wrapper>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ng-container *ngIf=\"slide.background\">\r\n        <ng-container *ngTemplateOutlet=\"slideBackground; context:{$implicit: slide.background}\">\r\n        </ng-container>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- ===== SLIDE FOREGROUND ===== -->\r\n<ng-template #slideForeground\r\n             let-items=\"items\"\r\n             let-slideID=\"slideID\">\r\n  <ng-container *ngFor=\"let el of items; let itemID = index\">\r\n    <h1 class=\"n7-carousel__slide-title\"\r\n        *ngIf=\"el.title\">{{el.title}}</h1>\r\n    <span class=\"n7-carousel__slide-text\"\r\n          *ngIf=\"el.text\">{{el.text}}</span>\r\n    <div class=\"n7-carousel__slide-metadata-wrapper\"\r\n         *ngIf=\"el.metadata\">\r\n      <ng-container *ngFor=\"let m of el.metadata\">\r\n        <div class=\"n7-carousel__slide-metadata\">\r\n            <span class=\"n7-carousel__slide-metadata-label\"\r\n              *ngIf=\"m.key\">{{m.key}}</span>\r\n            <span class=\"n7-carousel__slide-metadata-value\"\r\n              *ngIf=\"m.value\">{{m.value}}</span>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<!-- ===== VIDEO BACKGROUND ===== -->\r\n<ng-template #slideBackground\r\n             let-bg>\r\n  <ng-container *ngIf=\"bg.video as v\">\r\n    <video #video\r\n           class=\"n7-carousel__slide-video\"\r\n           [poster]=\"v.poster\"\r\n           [height]=\"v.height\"\r\n           [width]=\"v.width\"\r\n           loop\r\n           muted\r\n           autoplay\r\n           playsinline>\r\n      <source #source\r\n              class=\"lazy\"\r\n              [attr.data-src]=\"v.url\"\r\n              type=\"video/mp4\">\r\n    </video>\r\n    <div class=\"n7-carousel__slide-video-overlay\">\r\n\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n"
        })
    ], CarouselComponent);
    return CarouselComponent;
}());
export { CarouselComponent };
//# sourceMappingURL=data:application/json;base64,