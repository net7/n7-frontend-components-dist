//---------------------------
// FILE-SELECTOR.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class FileSelectorComponent {
    onFileSelected(eventTarget) {
        if (!this.emit)
            return;
        const input = eventTarget;
        const iterableFiles = Array.from(input.files);
        Promise
            .all(iterableFiles.map((file) => this.toBase64(file)))
            .then((base64list) => {
            this.emit('change', { target: eventTarget, files: input.files, base64: base64list });
        });
    }
    /** Obtain base64 string for upload and storage */
    toBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onerror = (err) => reject(err);
            reader.onload = () => resolve(reader.result);
            reader.readAsDataURL(file);
        });
    }
}
FileSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: FileSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FileSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: FileSelectorComponent, selector: "n7-file-selector", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<ng-container *ngIf=\"data\">\n    <!-- HIDDEN NATIVE INPUT ELEMENT -->\n    <input type=\"file\"\n           class=\"file-input\"\n           [accept]=\"data.accept\"\n           [multiple]=\"data.multiple\"\n           (change)=\"onFileSelected($event.target)\"\n           [ngStyle]=\"{'display': 'none'}\"\n           #fileUpload>\n    \n    <!-- CAPTURES THE CLICKS ON THE INNER CONTENT -->\n    <div class=\"n7-file-selector\"\n         (click)=\"fileUpload.click()\">\n        <ng-content>\n            <!-- UI ELEMENTS FOR IMAGE UPLOAD -->\n        </ng-content>\n    </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: FileSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-file-selector', template: "<ng-container *ngIf=\"data\">\n    <!-- HIDDEN NATIVE INPUT ELEMENT -->\n    <input type=\"file\"\n           class=\"file-input\"\n           [accept]=\"data.accept\"\n           [multiple]=\"data.multiple\"\n           (change)=\"onFileSelected($event.target)\"\n           [ngStyle]=\"{'display': 'none'}\"\n           #fileUpload>\n    \n    <!-- CAPTURES THE CLICKS ON THE INNER CONTENT -->\n    <div class=\"n7-file-selector\"\n         (click)=\"fileUpload.click()\">\n        <ng-content>\n            <!-- UI ELEMENTS FOR IMAGE UPLOAD -->\n        </ng-content>\n    </div>\n</ng-container>\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2R2LWNvbXBvbmVudHMtbGliL3NyYy9saWIvY29tcG9uZW50cy9maWxlLXNlbGVjdG9yL2ZpbGUtc2VsZWN0b3IudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvZmlsZS1zZWxlY3Rvci9maWxlLXNlbGVjdG9yLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLG1CQUFtQjtBQUNuQiw2QkFBNkI7QUFFN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQTJCakQsTUFBTSxPQUFPLHFCQUFxQjtJQUtoQyxjQUFjLENBQUMsV0FBVztRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPO1FBQ3ZCLE1BQU0sS0FBSyxHQUFxQixXQUFXLENBQUM7UUFDNUMsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsT0FBTzthQUNKLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDckQsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZGLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGtEQUFrRDtJQUNsRCxRQUFRLENBQUMsSUFBVTtRQUNqQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7WUFDaEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7a0hBeEJVLHFCQUFxQjtzR0FBckIscUJBQXFCLGdHQy9CbEMsMmxCQWtCQTsyRkRhYSxxQkFBcUI7a0JBSmpDLFNBQVM7K0JBQ0Usa0JBQWtCOzhCQUluQixJQUFJO3NCQUFaLEtBQUs7Z0JBRUcsSUFBSTtzQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEZJTEUtU0VMRUNUT1IudHNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIEZpbGVTZWxlY3RvckNvbXBvbmVudCdzIFwiZGF0YVwiXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlbGVjdG9yRGF0YSB7XG4gIC8qKlxuICAgKiBBY2NlcHRlZCBmaWxlIHR5cGVzXG4gICAqIEBleGFtcGxlICcuanBnLC5wbmcnICdpbWFnZS8qJ1xuICAgKi9cbiAgYWNjZXB0Pzogc3RyaW5nO1xuICAvKiogQWxsb3cgc2VsZWN0aW9uIG9mIG11bHRpcGxlIGZpbGVzICovXG4gIG11bHRpcGxlPzogYm9vbGVhbjtcbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3NlcyBmb3IgdGhlIHdyYXBwaW5nIGVsZW1lbnQgKi9cbiAgY2xhc3Nlcz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlU2VsZWN0b3JQYXlsb2FkIHtcbiAgdGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50LFxuICBmaWxlczogRmlsZUxpc3QsXG4gIGJhc2U2NDogQXJyYXk8c3RyaW5nIHwgQXJyYXlCdWZmZXI+XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ243LWZpbGUtc2VsZWN0b3InLFxuICB0ZW1wbGF0ZVVybDogJy4vZmlsZS1zZWxlY3Rvci5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBGaWxlU2VsZWN0b3JDb21wb25lbnQge1xuICBASW5wdXQoKSBkYXRhOiBGaWxlU2VsZWN0b3JEYXRhO1xuXG4gIEBJbnB1dCgpIGVtaXQ6ICh0eXBlOiBzdHJpbmcsIHBheWxvYWQ6IEZpbGVTZWxlY3RvclBheWxvYWQpID0+IHZvaWQ7XG5cbiAgb25GaWxlU2VsZWN0ZWQoZXZlbnRUYXJnZXQpIHtcbiAgICBpZiAoIXRoaXMuZW1pdCkgcmV0dXJuO1xuICAgIGNvbnN0IGlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gZXZlbnRUYXJnZXQ7XG4gICAgY29uc3QgaXRlcmFibGVGaWxlcyA9IEFycmF5LmZyb20oaW5wdXQuZmlsZXMpO1xuICAgIFByb21pc2VcbiAgICAgIC5hbGwoaXRlcmFibGVGaWxlcy5tYXAoKGZpbGUpID0+IHRoaXMudG9CYXNlNjQoZmlsZSkpKVxuICAgICAgLnRoZW4oKGJhc2U2NGxpc3QpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGFuZ2UnLCB7IHRhcmdldDogZXZlbnRUYXJnZXQsIGZpbGVzOiBpbnB1dC5maWxlcywgYmFzZTY0OiBiYXNlNjRsaXN0IH0pO1xuICAgICAgfSk7XG4gIH1cblxuICAvKiogT2J0YWluIGJhc2U2NCBzdHJpbmcgZm9yIHVwbG9hZCBhbmQgc3RvcmFnZSAqL1xuICB0b0Jhc2U2NChmaWxlOiBGaWxlKTogUHJvbWlzZTxGaWxlUmVhZGVyWydyZXN1bHQnXT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoZXJyKSA9PiByZWplY3QoZXJyKTtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xuICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJkYXRhXCI+XG4gICAgPCEtLSBISURERU4gTkFUSVZFIElOUFVUIEVMRU1FTlQgLS0+XG4gICAgPGlucHV0IHR5cGU9XCJmaWxlXCJcbiAgICAgICAgICAgY2xhc3M9XCJmaWxlLWlucHV0XCJcbiAgICAgICAgICAgW2FjY2VwdF09XCJkYXRhLmFjY2VwdFwiXG4gICAgICAgICAgIFttdWx0aXBsZV09XCJkYXRhLm11bHRpcGxlXCJcbiAgICAgICAgICAgKGNoYW5nZSk9XCJvbkZpbGVTZWxlY3RlZCgkZXZlbnQudGFyZ2V0KVwiXG4gICAgICAgICAgIFtuZ1N0eWxlXT1cInsnZGlzcGxheSc6ICdub25lJ31cIlxuICAgICAgICAgICAjZmlsZVVwbG9hZD5cbiAgICBcbiAgICA8IS0tIENBUFRVUkVTIFRIRSBDTElDS1MgT04gVEhFIElOTkVSIENPTlRFTlQgLS0+XG4gICAgPGRpdiBjbGFzcz1cIm43LWZpbGUtc2VsZWN0b3JcIlxuICAgICAgICAgKGNsaWNrKT1cImZpbGVVcGxvYWQuY2xpY2soKVwiPlxuICAgICAgICA8bmctY29udGVudD5cbiAgICAgICAgICAgIDwhLS0gVUkgRUxFTUVOVFMgRk9SIElNQUdFIFVQTE9BRCAtLT5cbiAgICAgICAgPC9uZy1jb250ZW50PlxuICAgIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=