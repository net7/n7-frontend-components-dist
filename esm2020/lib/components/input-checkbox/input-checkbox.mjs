//---------------------------
// INPUT-CHECKBOX.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class InputCheckboxComponent {
    onChange(inputPayload, value) {
        if (!this.emit)
            return;
        this.emit('change', { inputPayload, value });
    }
}
InputCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: InputCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: InputCheckboxComponent, selector: "n7-input-checkbox", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<div *ngIf=\"data\"\n     class=\"n7-input-checkbox {{ data.classes || '' }}\">\n    <fieldset class=\"n7-input-checkbox__fieldset\">\n        <legend class=\"n7-input-checkbox__legend\"\n                *ngIf=\"data.legend\"\n                [innerHTML]=\"data.legend\"></legend>\n        <ng-container *ngFor=\"let input of data.checkboxes\">\n            <div class=\"n7-input-checkbox__input-wrapper\">\n                <input type=\"checkbox\"\n                       id=\"{{ input.id }}\"\n                       [attr.name]=\"input.name\"\n                       class=\"n7-input-checkbox__input\"\n                       [ngClass]=\"input.classes\"\n                       [checked]=\"input.checked\"\n                       [disabled]=\"input.disabled\"\n                       (change)=\"onChange(input.payload, $event.target.checked)\">\n                <label *ngIf=\"input.label\"\n                       class=\"n7-input-checkbox__label\"\n                       for=\"{{ input.id }}\">{{ input.label }}</label>\n            </div>\n        </ng-container>\n    </fieldset>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: InputCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-input-checkbox', template: "<div *ngIf=\"data\"\n     class=\"n7-input-checkbox {{ data.classes || '' }}\">\n    <fieldset class=\"n7-input-checkbox__fieldset\">\n        <legend class=\"n7-input-checkbox__legend\"\n                *ngIf=\"data.legend\"\n                [innerHTML]=\"data.legend\"></legend>\n        <ng-container *ngFor=\"let input of data.checkboxes\">\n            <div class=\"n7-input-checkbox__input-wrapper\">\n                <input type=\"checkbox\"\n                       id=\"{{ input.id }}\"\n                       [attr.name]=\"input.name\"\n                       class=\"n7-input-checkbox__input\"\n                       [ngClass]=\"input.classes\"\n                       [checked]=\"input.checked\"\n                       [disabled]=\"input.disabled\"\n                       (change)=\"onChange(input.payload, $event.target.checked)\">\n                <label *ngIf=\"input.label\"\n                       class=\"n7-input-checkbox__label\"\n                       for=\"{{ input.id }}\">{{ input.label }}</label>\n            </div>\n        </ng-container>\n    </fieldset>\n</div>\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY2hlY2tib3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQtY2hlY2tib3gvaW5wdXQtY2hlY2tib3gudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQtY2hlY2tib3gvaW5wdXQtY2hlY2tib3guaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0Isb0JBQW9CO0FBQ3BCLDZCQUE2QjtBQUU3QixPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBdUVqRCxNQUFNLE9BQU8sc0JBQXNCO0lBS2pDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsS0FBTTtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7bUhBUlUsc0JBQXNCO3VHQUF0QixzQkFBc0IsaUdDM0VuQywya0NBdUJBOzJGRG9EYSxzQkFBc0I7a0JBSmxDLFNBQVM7K0JBQ0UsbUJBQW1COzhCQUlwQixJQUFJO3NCQUFaLEtBQUs7Z0JBRUcsSUFBSTtzQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIElOUFVULUNIRUNLQk9YLnRzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBJbnB1dENoZWNrYm94XG4gKlxuICogQHByb3BlcnR5IGlkIChyZXF1aXJlZClcbiAqIEBwcm9wZXJ0eSBsYWJlbCAocmVxdWlyZWQpXG4gKiBAcHJvcGVydHkgY2hlY2tlZCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgZGlzYWJsZWQgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IHBheWxvYWQgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IGNsYXNzZXMgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IF9tZXRhIChvcHRpb25hbClcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnB1dENoZWNrYm94IHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBJRCBmb3IgdGhlIGNoZWNrYm94XG4gICAqL1xuICBpZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGNvbnRyb2wuXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogTGFiZWwgZm9yIHRoZSBjaGVja2JveFxuICAgKi9cbiAgbGFiZWw6IHN0cmluZztcbiAgLyoqXG4gICAqIERlZmF1bHRzIHRoZSBjaGVja2JveCB0byBiZSBjaGVja2VkXG4gICAqL1xuICBjaGVja2VkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFNldHMgdGhlIGRpc2FibGVkIEhUTUwgYXR0cmlidXRlXG4gICAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBQYXlsb2FkIGZvciB0aGUgY2hhbmdlIGV2ZW50XG4gICAqL1xuICBwYXlsb2FkPzogYW55O1xuICAvKipcbiAgICogQWRkaXRpb25hbCBIVE1MIENsYXNzZXNcbiAgICovXG4gIGNsYXNzZXM/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGRhdGEgZm9yIHRoZSBjb21wb25lbnQncyBsb2dpY1xuICAgKi9cbiAgX21ldGE/OiBhbnk7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBJbnB1dENoZWNrYm94RGF0YVxuICogQHByb3BlcnR5IGNoZWNrYm94ZXMgKHJlcXVpcmVkKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0Q2hlY2tib3hEYXRhIHtcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGlucHV0IGNoZWNrYm94ZXNcbiAgICovXG4gIGNoZWNrYm94ZXM6IElucHV0Q2hlY2tib3hbXTtcbiAgLyoqXG4gICAqIEZpZWxkc2V0IChncm91cCkgbGVnZW5kIGxhYmVsXG4gICAqL1xuICBsZWdlbmQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIEhUTUwgQ2xhc3Nlc1xuICAgKi9cbiAgY2xhc3Nlcz86IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbjctaW5wdXQtY2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtY2hlY2tib3guaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRDaGVja2JveENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGRhdGE6IElucHV0Q2hlY2tib3hEYXRhO1xuXG4gIEBJbnB1dCgpIGVtaXQ6IGFueTtcblxuICBvbkNoYW5nZShpbnB1dFBheWxvYWQsIHZhbHVlPykge1xuICAgIGlmICghdGhpcy5lbWl0KSByZXR1cm47XG4gICAgdGhpcy5lbWl0KCdjaGFuZ2UnLCB7IGlucHV0UGF5bG9hZCwgdmFsdWUgfSk7XG4gIH1cbn1cbiIsIjxkaXYgKm5nSWY9XCJkYXRhXCJcbiAgICAgY2xhc3M9XCJuNy1pbnB1dC1jaGVja2JveCB7eyBkYXRhLmNsYXNzZXMgfHwgJycgfX1cIj5cbiAgICA8ZmllbGRzZXQgY2xhc3M9XCJuNy1pbnB1dC1jaGVja2JveF9fZmllbGRzZXRcIj5cbiAgICAgICAgPGxlZ2VuZCBjbGFzcz1cIm43LWlucHV0LWNoZWNrYm94X19sZWdlbmRcIlxuICAgICAgICAgICAgICAgICpuZ0lmPVwiZGF0YS5sZWdlbmRcIlxuICAgICAgICAgICAgICAgIFtpbm5lckhUTUxdPVwiZGF0YS5sZWdlbmRcIj48L2xlZ2VuZD5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaW5wdXQgb2YgZGF0YS5jaGVja2JveGVzXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibjctaW5wdXQtY2hlY2tib3hfX2lucHV0LXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ7eyBpbnB1dC5pZCB9fVwiXG4gICAgICAgICAgICAgICAgICAgICAgIFthdHRyLm5hbWVdPVwiaW5wdXQubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibjctaW5wdXQtY2hlY2tib3hfX2lucHV0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwiaW5wdXQuY2xhc3Nlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgIFtjaGVja2VkXT1cImlucHV0LmNoZWNrZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiaW5wdXQuZGlzYWJsZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAoY2hhbmdlKT1cIm9uQ2hhbmdlKGlucHV0LnBheWxvYWQsICRldmVudC50YXJnZXQuY2hlY2tlZClcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgKm5nSWY9XCJpbnB1dC5sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibjctaW5wdXQtY2hlY2tib3hfX2xhYmVsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgZm9yPVwie3sgaW5wdXQuaWQgfX1cIj57eyBpbnB1dC5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9maWVsZHNldD5cbjwvZGl2PlxuIl19