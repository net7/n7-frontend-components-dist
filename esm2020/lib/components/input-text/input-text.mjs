//---------------------------
// INPUT-TEXT.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class InputTextComponent {
    onChange(inputPayload, value) {
        if (!this.emit)
            return;
        this.emit('change', { inputPayload, value });
    }
    onBlur() {
        if (!this.emit)
            return;
        this.emit('blur');
    }
    onFocus() {
        if (!this.emit)
            return;
        this.emit('focus');
    }
}
InputTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: InputTextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: InputTextComponent, selector: "n7-input-text", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<div *ngIf=\"data as input\"\n     class=\"n7-input-text\">\n    <label *ngIf=\"input.label\"\n           class=\"n7-input-text__label\"\n           for=\"{{ input.id }}\"\n           [innerHTML]=\"input.label\">\n    </label>\n    <div class=\"n7-input-text__wrapper\"\n         [ngClass]=\"{\n            'has-icon': !!input.icon\n        }\">\n        <input id=\"{{ input.id }}\"\n               class=\"n7-input-text__text\"\n               [ngClass]=\"input.classes\"\n               [type]=\"input.type ? input.type : 'text'\"\n               [attr.name]=\"input.name\"\n               [value]=\"input.value || null\"\n               [attr.placeholder]=\"input.placeholder\"\n               [attr.autocomplete]=\"input.autocomplete\"\n               [disabled]=\"input.disabled\"\n               [required]=\"input.required\"\n               [attr.max]=\"input.max\"\n               [attr.min]=\"input.min\"\n               [attr.maxlength]=\"input.maxlength\"\n               [attr.minlength]=\"input.minlength\"\n               (focus)=\"onFocus()\"\n               (blur)=\"onBlur()\"\n               (input)=\"onChange(input.inputPayload, $event.target.value)\"\n               (keyup.enter)=\"onChange(input.enterPayload, $event.target.value)\">\n        <span *ngIf=\"input.icon\"\n              class=\"n7-input-text__icon {{input.icon || ''}}\"\n              (click)=\"onChange(input.iconPayload)\">\n        </span>\n    </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: InputTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-input-text', template: "<div *ngIf=\"data as input\"\n     class=\"n7-input-text\">\n    <label *ngIf=\"input.label\"\n           class=\"n7-input-text__label\"\n           for=\"{{ input.id }}\"\n           [innerHTML]=\"input.label\">\n    </label>\n    <div class=\"n7-input-text__wrapper\"\n         [ngClass]=\"{\n            'has-icon': !!input.icon\n        }\">\n        <input id=\"{{ input.id }}\"\n               class=\"n7-input-text__text\"\n               [ngClass]=\"input.classes\"\n               [type]=\"input.type ? input.type : 'text'\"\n               [attr.name]=\"input.name\"\n               [value]=\"input.value || null\"\n               [attr.placeholder]=\"input.placeholder\"\n               [attr.autocomplete]=\"input.autocomplete\"\n               [disabled]=\"input.disabled\"\n               [required]=\"input.required\"\n               [attr.max]=\"input.max\"\n               [attr.min]=\"input.min\"\n               [attr.maxlength]=\"input.maxlength\"\n               [attr.minlength]=\"input.minlength\"\n               (focus)=\"onFocus()\"\n               (blur)=\"onBlur()\"\n               (input)=\"onChange(input.inputPayload, $event.target.value)\"\n               (keyup.enter)=\"onChange(input.enterPayload, $event.target.value)\">\n        <span *ngIf=\"input.icon\"\n              class=\"n7-input-text__icon {{input.icon || ''}}\"\n              (click)=\"onChange(input.iconPayload)\">\n        </span>\n    </div>\n</div>\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2R2LWNvbXBvbmVudHMtbGliL3NyYy9saWIvY29tcG9uZW50cy9pbnB1dC10ZXh0L2lucHV0LXRleHQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLGdCQUFnQjtBQUNoQiw2QkFBNkI7QUFFN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQWtHakQsTUFBTSxPQUFPLGtCQUFrQjtJQUs3QixRQUFRLENBQUMsWUFBWSxFQUFFLEtBQU07UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLENBQUM7OytHQWxCVSxrQkFBa0I7bUdBQWxCLGtCQUFrQiw2RkN0Ry9CLGc3Q0FtQ0E7MkZEbUVhLGtCQUFrQjtrQkFKOUIsU0FBUzsrQkFDRSxlQUFlOzhCQUloQixJQUFJO3NCQUFaLEtBQUs7Z0JBRUcsSUFBSTtzQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIElOUFVULVRFWFQudHNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9uT2ZmIH0gZnJvbSAnLi4vLi4vc2hhcmVkLWludGVyZmFjZXMnO1xuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgSW5wdXRUZXh0RGF0YVxuICpcbiAqIEBwcm9wZXJ0eSBpZCAocmVxdWlyZWQpXG4gKiBAcHJvcGVydHkgcGxhY2Vob2xkZXIgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IHZhbHVlIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBsYWJlbCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgZGlzYWJsZWQgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IGljb24gKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IGlucHV0UGF5bG9hZCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgZW50ZXJQYXlsb2FkIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBpY29uUGF5bG9hZCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgY2xhc3NlcyAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgX21ldGEgKG9wdGlvbmFsKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0VGV4dERhdGEge1xuICAvKipcbiAgICogVW5pcXVlIElEIGZvciB0aGUgdGV4dCBpbnB1dCBlbGVtZW50XG4gICAqL1xuICBpZDogc3RyaW5nO1xuICAvKipcbiAgICogSW5wdXQgdHlwZVxuICAgKi9cbiAgdHlwZT86ICd0ZXh0JyB8ICdudW1iZXInO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGNvbnRyb2wuXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogQSBoaW50IHRvIHRoZSB1c2VyIG9mIHdoYXQgY2FuIGJlIGVudGVyZWQgaW4gdGhlIGNvbnRyb2wuXG4gICAqL1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgLyoqXG4gICAqIERlZmF1bHQgdmFsdWUgb2YgdGhlIGlucHV0IGJveFxuICAgKi9cbiAgdmFsdWU/OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsO1xuICAvKipcbiAgICogTGFiZWwgZm9yIHRoZSBpbnB1dCBib3hcbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xuICAvKipcbiAgICogUHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgaW5wdXQncyB2YWx1ZVxuICAgKi9cbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAvKipcbiAgICogT3B0aW9uYWwgaWNvbiB0byByZW5kZXIgaW5zaWRlIHRoZSBpbnB1dCBib3ggKGVnLiBuNy1pY29uLXNlYXJjaClcbiAgICovXG4gIGljb24/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBQYXlsb2FkIHRoYXQgaXMgc2VudCB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIHZhbHVlXG4gICAqL1xuICBpbnB1dFBheWxvYWQ/OiBhbnk7XG4gIC8qKlxuICAgKiBQYXlsb2FkIHRoYXQgaXMgc2VudCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgdGhlIFwiRW50ZXJcIiBrZXlcbiAgICovXG4gIGVudGVyUGF5bG9hZD86IGFueTtcbiAgLyoqXG4gICAqIFBheWxvYWQgdGhhdCBpcyBzZW50IHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBpY29uXG4gICAqL1xuICBpY29uUGF5bG9hZD86IGFueTtcbiAgLyoqXG4gICAqIElucHV0IG1pbmltdW4gYWxsb3dlZCB2YWx1ZSAob25seSBmb3IgdHlwZT1udW1iZXIpXG4gICAqL1xuICBtaW4/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBJbnB1dCBtYXhpbXVuIGFsbG93ZWQgdmFsdWUgKG9ubHkgZm9yIHR5cGU9bnVtYmVyKVxuICAgKi9cbiAgbWF4PzogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgKFVURi0xNiBjb2RlIHVuaXRzKSB0aGF0IHRoZSB1c2VyIGNhbiBlbnRlci5cbiAgICogSWYgdGhpcyB2YWx1ZSBpc24ndCBzcGVjaWZpZWQsIHRoZSB1c2VyIGNhbiBlbnRlciBhbiB1bmxpbWl0ZWQgbnVtYmVyIG9mIGNoYXJhY3RlcnMuXG4gICAqL1xuICBtYXhsZW5ndGg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyAoVVRGLTE2IGNvZGUgdW5pdHMpIHJlcXVpcmVkIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGVudGVyLlxuICAgKi9cbiAgbWlubGVuZ3RoPzogbnVtYmVyO1xuICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHZhbHVlIG9mIHRoZSBjb250cm9sIGNhbiBiZSBhdXRvbWF0aWNhbGx5IGNvbXBsZXRlZCBieSB0aGUgYnJvd3Nlci4gKi9cbiAgYXV0b2NvbXBsZXRlPzogT25PZmY7XG4gIC8qKiBTcGVjaWZpZXMgdGhhdCB0aGUgdXNlciBtdXN0IGZpbGwgaW4gYSB2YWx1ZSBiZWZvcmUgc3VibWl0dGluZyBhIGZvcm0uICovXG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgSFRNTCBDbGFzc2VzXG4gICAqL1xuICBjbGFzc2VzPzogYW55O1xuICAvKipcbiAgICogQWRkaXRpb25hbCBkYXRhIGZvciB0aGUgY29tcG9uZW50J3MgbG9naWNcbiAgICovXG4gIF9tZXRhPzogYW55O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduNy1pbnB1dC10ZXh0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LXRleHQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0Q29tcG9uZW50IHtcbiAgQElucHV0KCkgZGF0YTogSW5wdXRUZXh0RGF0YTtcblxuICBASW5wdXQoKSBlbWl0OiBhbnk7XG5cbiAgb25DaGFuZ2UoaW5wdXRQYXlsb2FkLCB2YWx1ZT8pIHtcbiAgICBpZiAoIXRoaXMuZW1pdCkgcmV0dXJuO1xuICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgeyBpbnB1dFBheWxvYWQsIHZhbHVlIH0pO1xuICB9XG5cbiAgb25CbHVyKCkge1xuICAgIGlmICghdGhpcy5lbWl0KSByZXR1cm47XG4gICAgdGhpcy5lbWl0KCdibHVyJyk7XG4gIH1cblxuICBvbkZvY3VzKCkge1xuICAgIGlmICghdGhpcy5lbWl0KSByZXR1cm47XG4gICAgdGhpcy5lbWl0KCdmb2N1cycpO1xuICB9XG59XG4iLCI8ZGl2ICpuZ0lmPVwiZGF0YSBhcyBpbnB1dFwiXG4gICAgIGNsYXNzPVwibjctaW5wdXQtdGV4dFwiPlxuICAgIDxsYWJlbCAqbmdJZj1cImlucHV0LmxhYmVsXCJcbiAgICAgICAgICAgY2xhc3M9XCJuNy1pbnB1dC10ZXh0X19sYWJlbFwiXG4gICAgICAgICAgIGZvcj1cInt7IGlucHV0LmlkIH19XCJcbiAgICAgICAgICAgW2lubmVySFRNTF09XCJpbnB1dC5sYWJlbFwiPlxuICAgIDwvbGFiZWw+XG4gICAgPGRpdiBjbGFzcz1cIm43LWlucHV0LXRleHRfX3dyYXBwZXJcIlxuICAgICAgICAgW25nQ2xhc3NdPVwie1xuICAgICAgICAgICAgJ2hhcy1pY29uJzogISFpbnB1dC5pY29uXG4gICAgICAgIH1cIj5cbiAgICAgICAgPGlucHV0IGlkPVwie3sgaW5wdXQuaWQgfX1cIlxuICAgICAgICAgICAgICAgY2xhc3M9XCJuNy1pbnB1dC10ZXh0X190ZXh0XCJcbiAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImlucHV0LmNsYXNzZXNcIlxuICAgICAgICAgICAgICAgW3R5cGVdPVwiaW5wdXQudHlwZSA/IGlucHV0LnR5cGUgOiAndGV4dCdcIlxuICAgICAgICAgICAgICAgW2F0dHIubmFtZV09XCJpbnB1dC5uYW1lXCJcbiAgICAgICAgICAgICAgIFt2YWx1ZV09XCJpbnB1dC52YWx1ZSB8fCBudWxsXCJcbiAgICAgICAgICAgICAgIFthdHRyLnBsYWNlaG9sZGVyXT1cImlucHV0LnBsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgICAgIFthdHRyLmF1dG9jb21wbGV0ZV09XCJpbnB1dC5hdXRvY29tcGxldGVcIlxuICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImlucHV0LmRpc2FibGVkXCJcbiAgICAgICAgICAgICAgIFtyZXF1aXJlZF09XCJpbnB1dC5yZXF1aXJlZFwiXG4gICAgICAgICAgICAgICBbYXR0ci5tYXhdPVwiaW5wdXQubWF4XCJcbiAgICAgICAgICAgICAgIFthdHRyLm1pbl09XCJpbnB1dC5taW5cIlxuICAgICAgICAgICAgICAgW2F0dHIubWF4bGVuZ3RoXT1cImlucHV0Lm1heGxlbmd0aFwiXG4gICAgICAgICAgICAgICBbYXR0ci5taW5sZW5ndGhdPVwiaW5wdXQubWlubGVuZ3RoXCJcbiAgICAgICAgICAgICAgIChmb2N1cyk9XCJvbkZvY3VzKClcIlxuICAgICAgICAgICAgICAgKGJsdXIpPVwib25CbHVyKClcIlxuICAgICAgICAgICAgICAgKGlucHV0KT1cIm9uQ2hhbmdlKGlucHV0LmlucHV0UGF5bG9hZCwgJGV2ZW50LnRhcmdldC52YWx1ZSlcIlxuICAgICAgICAgICAgICAgKGtleXVwLmVudGVyKT1cIm9uQ2hhbmdlKGlucHV0LmVudGVyUGF5bG9hZCwgJGV2ZW50LnRhcmdldC52YWx1ZSlcIj5cbiAgICAgICAgPHNwYW4gKm5nSWY9XCJpbnB1dC5pY29uXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJuNy1pbnB1dC10ZXh0X19pY29uIHt7aW5wdXQuaWNvbiB8fCAnJ319XCJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cIm9uQ2hhbmdlKGlucHV0Lmljb25QYXlsb2FkKVwiPlxuICAgICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==