//---------------------------
// INPUT-TEXT.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class InputTextComponent {
    onChange(inputPayload, value) {
        if (!this.emit)
            return;
        this.emit('change', { inputPayload, value });
    }
}
InputTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.0", ngImport: i0, type: InputTextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.0", type: InputTextComponent, selector: "n7-input-text", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<div *ngIf=\"data as input\"\n     class=\"n7-input-text\">\n    <label *ngIf=\"input.label\"\n        class=\"n7-input-text__label\"\n        for=\"{{ input.id }}\">\n        {{ input.label }}\n    </label>\n    <div class=\"n7-input-text__wrapper\"\n        [ngClass]=\"{\n            'has-icon': !!input.icon\n        }\">\n        <input id=\"{{ input.id }}\"\n            class=\"n7-input-text__text {{input.classes || ''}}\"\n            placeholder=\"{{input.placeholder || ''}}\"\n            [type]=\"input.type ? input.type : 'text'\"\n            [value]=\"input.value || null\"\n            [disabled]=\"input.disabled\"\n            [min]=\"input.type === 'number' && (input.min || input.min === 0) ? input.min : ''\"\n            [max]=\"input.type === 'number' && (input.max || input.max === 0) ? input.max : ''\"\n            (input)=\"onChange(input.inputPayload, $event.target.value)\"\n            (keyup.enter)=\"onChange(input.enterPayload, $event.target.value)\">\n        <span *ngIf=\"input.icon\"\n            class=\"n7-input-text__icon {{input.icon || ''}}\"\n            (click)=\"onChange(input.iconPayload)\">\n        </span>\n    </div>\n</div>\n", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.0", ngImport: i0, type: InputTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-input-text', template: "<div *ngIf=\"data as input\"\n     class=\"n7-input-text\">\n    <label *ngIf=\"input.label\"\n        class=\"n7-input-text__label\"\n        for=\"{{ input.id }}\">\n        {{ input.label }}\n    </label>\n    <div class=\"n7-input-text__wrapper\"\n        [ngClass]=\"{\n            'has-icon': !!input.icon\n        }\">\n        <input id=\"{{ input.id }}\"\n            class=\"n7-input-text__text {{input.classes || ''}}\"\n            placeholder=\"{{input.placeholder || ''}}\"\n            [type]=\"input.type ? input.type : 'text'\"\n            [value]=\"input.value || null\"\n            [disabled]=\"input.disabled\"\n            [min]=\"input.type === 'number' && (input.min || input.min === 0) ? input.min : ''\"\n            [max]=\"input.type === 'number' && (input.max || input.max === 0) ? input.max : ''\"\n            (input)=\"onChange(input.inputPayload, $event.target.value)\"\n            (keyup.enter)=\"onChange(input.enterPayload, $event.target.value)\">\n        <span *ngIf=\"input.icon\"\n            class=\"n7-input-text__icon {{input.icon || ''}}\"\n            (click)=\"onChange(input.iconPayload)\">\n        </span>\n    </div>\n</div>\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2R2LWNvbXBvbmVudHMtbGliL3NyYy9saWIvY29tcG9uZW50cy9pbnB1dC10ZXh0L2lucHV0LXRleHQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLGdCQUFnQjtBQUNoQiw2QkFBNkI7QUFFN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQWdGakQsTUFBTSxPQUFPLGtCQUFrQjtJQUs3QixRQUFRLENBQUMsWUFBWSxFQUFFLEtBQU07UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7OytHQVJVLGtCQUFrQjttR0FBbEIsa0JBQWtCLDZGQ3BGL0IsNHBDQTJCQTsyRkR5RGEsa0JBQWtCO2tCQUo5QixTQUFTOytCQUNFLGVBQWU7OEJBSWhCLElBQUk7c0JBQVosS0FBSztnQkFFRyxJQUFJO3NCQUFaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSU5QVVQtVEVYVC50c1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgSW5wdXRUZXh0RGF0YVxuICpcbiAqIEBwcm9wZXJ0eSBpZCAocmVxdWlyZWQpXG4gKiBAcHJvcGVydHkgcGxhY2Vob2xkZXIgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IHZhbHVlIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBsYWJlbCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgZGlzYWJsZWQgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IGljb24gKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IGlucHV0UGF5bG9hZCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgZW50ZXJQYXlsb2FkIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBpY29uUGF5bG9hZCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgY2xhc3NlcyAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgX21ldGEgKG9wdGlvbmFsKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0VGV4dERhdGEge1xuICAvKipcbiAgICogVW5pcXVlIElEIGZvciB0aGUgdGV4dCBpbnB1dCBlbGVtZW50XG4gICAqL1xuICBpZDogc3RyaW5nO1xuICAvKipcbiAgICogSW5wdXQgdHlwZVxuICAgKi9cbiAgdHlwZT86ICd0ZXh0JyB8ICdudW1iZXInO1xuICAvKipcbiAgICogUGxhY2Vob2xkZXIgdGV4dCBpbnNpZGUgdGhlIGlucHV0IGJveFxuICAgKi9cbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBEZWZhdWx0IHZhbHVlIG9mIHRoZSBpbnB1dCBib3hcbiAgICovXG4gIHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbDtcbiAgLyoqXG4gICAqIExhYmVsIGZvciB0aGUgaW5wdXQgYm94XG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcbiAgLyoqXG4gICAqIFByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIGlucHV0J3MgdmFsdWVcbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGljb24gdG8gcmVuZGVyIGluc2lkZSB0aGUgaW5wdXQgYm94IChlZy4gbjctaWNvbi1zZWFyY2gpXG4gICAqL1xuICBpY29uPzogc3RyaW5nO1xuICAvKipcbiAgICogUGF5bG9hZCB0aGF0IGlzIHNlbnQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSB2YWx1ZVxuICAgKi9cbiAgaW5wdXRQYXlsb2FkPzogYW55O1xuICAvKipcbiAgICogUGF5bG9hZCB0aGF0IGlzIHNlbnQgd2hlbiB0aGUgdXNlciBwcmVzc2VzIHRoZSBcIkVudGVyXCIga2V5XG4gICAqL1xuICBlbnRlclBheWxvYWQ/OiBhbnk7XG4gIC8qKlxuICAgKiBQYXlsb2FkIHRoYXQgaXMgc2VudCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgaWNvblxuICAgKi9cbiAgaWNvblBheWxvYWQ/OiBhbnk7XG4gIC8qKlxuICAgKiBJbnB1dCBtaW5pbXVuIGFsbG93ZWQgdmFsdWUgKG9ubHkgZm9yIHR5cGU9bnVtYmVyKVxuICAgKi9cbiAgbWluPzogbnVtYmVyO1xuICAvKipcbiAgICogSW5wdXQgbWF4aW11biBhbGxvd2VkIHZhbHVlIChvbmx5IGZvciB0eXBlPW51bWJlcilcbiAgICovXG4gIG1heD86IG51bWJlcjtcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgSFRNTCBDbGFzc2VzXG4gICAqL1xuICBjbGFzc2VzPzogYW55O1xuICAvKipcbiAgICogQWRkaXRpb25hbCBkYXRhIGZvciB0aGUgY29tcG9uZW50J3MgbG9naWNcbiAgICovXG4gIF9tZXRhPzogYW55O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduNy1pbnB1dC10ZXh0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LXRleHQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0Q29tcG9uZW50IHtcbiAgQElucHV0KCkgZGF0YTogSW5wdXRUZXh0RGF0YTtcblxuICBASW5wdXQoKSBlbWl0OiBhbnk7XG5cbiAgb25DaGFuZ2UoaW5wdXRQYXlsb2FkLCB2YWx1ZT8pIHtcbiAgICBpZiAoIXRoaXMuZW1pdCkgcmV0dXJuO1xuICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgeyBpbnB1dFBheWxvYWQsIHZhbHVlIH0pO1xuICB9XG59XG4iLCI8ZGl2ICpuZ0lmPVwiZGF0YSBhcyBpbnB1dFwiXG4gICAgIGNsYXNzPVwibjctaW5wdXQtdGV4dFwiPlxuICAgIDxsYWJlbCAqbmdJZj1cImlucHV0LmxhYmVsXCJcbiAgICAgICAgY2xhc3M9XCJuNy1pbnB1dC10ZXh0X19sYWJlbFwiXG4gICAgICAgIGZvcj1cInt7IGlucHV0LmlkIH19XCI+XG4gICAgICAgIHt7IGlucHV0LmxhYmVsIH19XG4gICAgPC9sYWJlbD5cbiAgICA8ZGl2IGNsYXNzPVwibjctaW5wdXQtdGV4dF9fd3JhcHBlclwiXG4gICAgICAgIFtuZ0NsYXNzXT1cIntcbiAgICAgICAgICAgICdoYXMtaWNvbic6ICEhaW5wdXQuaWNvblxuICAgICAgICB9XCI+XG4gICAgICAgIDxpbnB1dCBpZD1cInt7IGlucHV0LmlkIH19XCJcbiAgICAgICAgICAgIGNsYXNzPVwibjctaW5wdXQtdGV4dF9fdGV4dCB7e2lucHV0LmNsYXNzZXMgfHwgJyd9fVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7aW5wdXQucGxhY2Vob2xkZXIgfHwgJyd9fVwiXG4gICAgICAgICAgICBbdHlwZV09XCJpbnB1dC50eXBlID8gaW5wdXQudHlwZSA6ICd0ZXh0J1wiXG4gICAgICAgICAgICBbdmFsdWVdPVwiaW5wdXQudmFsdWUgfHwgbnVsbFwiXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVwiaW5wdXQuZGlzYWJsZWRcIlxuICAgICAgICAgICAgW21pbl09XCJpbnB1dC50eXBlID09PSAnbnVtYmVyJyAmJiAoaW5wdXQubWluIHx8IGlucHV0Lm1pbiA9PT0gMCkgPyBpbnB1dC5taW4gOiAnJ1wiXG4gICAgICAgICAgICBbbWF4XT1cImlucHV0LnR5cGUgPT09ICdudW1iZXInICYmIChpbnB1dC5tYXggfHwgaW5wdXQubWF4ID09PSAwKSA/IGlucHV0Lm1heCA6ICcnXCJcbiAgICAgICAgICAgIChpbnB1dCk9XCJvbkNoYW5nZShpbnB1dC5pbnB1dFBheWxvYWQsICRldmVudC50YXJnZXQudmFsdWUpXCJcbiAgICAgICAgICAgIChrZXl1cC5lbnRlcik9XCJvbkNoYW5nZShpbnB1dC5lbnRlclBheWxvYWQsICRldmVudC50YXJnZXQudmFsdWUpXCI+XG4gICAgICAgIDxzcGFuICpuZ0lmPVwiaW5wdXQuaWNvblwiXG4gICAgICAgICAgICBjbGFzcz1cIm43LWlucHV0LXRleHRfX2ljb24ge3tpbnB1dC5pY29uIHx8ICcnfX1cIlxuICAgICAgICAgICAgKGNsaWNrKT1cIm9uQ2hhbmdlKGlucHV0Lmljb25QYXlsb2FkKVwiPlxuICAgICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==