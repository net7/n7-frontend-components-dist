//---------------------------
// INPUT-TEXT.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class InputTextComponent {
    onChange(inputPayload, value) {
        if (!this.emit)
            return;
        this.emit('change', { inputPayload, value });
    }
}
InputTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: InputTextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.2", type: InputTextComponent, selector: "n7-input-text", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<div *ngIf=\"data as input\"\r\n     class=\"n7-input-text\">\r\n    <label *ngIf=\"input.label\"\r\n        class=\"n7-input-text__label\"\r\n        for=\"{{ input.id }}\">\r\n        {{ input.label }}\r\n    </label>\r\n    <div class=\"n7-input-text__wrapper\"\r\n        [ngClass]=\"{\r\n            'has-icon': !!input.icon\r\n        }\">\r\n        <input id=\"{{ input.id }}\"\r\n            class=\"n7-input-text__text {{input.classes || ''}}\"\r\n            placeholder=\"{{input.placeholder || ''}}\"\r\n            [type]=\"input.type ? input.type : 'text'\"\r\n            [value]=\"input.value || null\"\r\n            [disabled]=\"input.disabled\"\r\n            [min]=\"input.type === 'number' && (input.min || input.min === 0) ? input.min : ''\"\r\n            [max]=\"input.type === 'number' && (input.max || input.max === 0) ? input.max : ''\"\r\n            (input)=\"onChange(input.inputPayload, $event.target.value)\"\r\n            (keyup.enter)=\"onChange(input.enterPayload, $event.target.value)\">\r\n        <span *ngIf=\"input.icon\"\r\n            class=\"n7-input-text__icon {{input.icon || ''}}\"\r\n            (click)=\"onChange(input.iconPayload)\">\r\n        </span>\r\n    </div>\r\n</div>\r\n", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: InputTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-input-text', template: "<div *ngIf=\"data as input\"\r\n     class=\"n7-input-text\">\r\n    <label *ngIf=\"input.label\"\r\n        class=\"n7-input-text__label\"\r\n        for=\"{{ input.id }}\">\r\n        {{ input.label }}\r\n    </label>\r\n    <div class=\"n7-input-text__wrapper\"\r\n        [ngClass]=\"{\r\n            'has-icon': !!input.icon\r\n        }\">\r\n        <input id=\"{{ input.id }}\"\r\n            class=\"n7-input-text__text {{input.classes || ''}}\"\r\n            placeholder=\"{{input.placeholder || ''}}\"\r\n            [type]=\"input.type ? input.type : 'text'\"\r\n            [value]=\"input.value || null\"\r\n            [disabled]=\"input.disabled\"\r\n            [min]=\"input.type === 'number' && (input.min || input.min === 0) ? input.min : ''\"\r\n            [max]=\"input.type === 'number' && (input.max || input.max === 0) ? input.max : ''\"\r\n            (input)=\"onChange(input.inputPayload, $event.target.value)\"\r\n            (keyup.enter)=\"onChange(input.enterPayload, $event.target.value)\">\r\n        <span *ngIf=\"input.icon\"\r\n            class=\"n7-input-text__icon {{input.icon || ''}}\"\r\n            (click)=\"onChange(input.iconPayload)\">\r\n        </span>\r\n    </div>\r\n</div>\r\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2R2LWNvbXBvbmVudHMtbGliL3NyYy9saWIvY29tcG9uZW50cy9pbnB1dC10ZXh0L2lucHV0LXRleHQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLGdCQUFnQjtBQUNoQiw2QkFBNkI7QUFFN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQWdGakQsTUFBTSxPQUFPLGtCQUFrQjtJQUs3QixRQUFRLENBQUMsWUFBWSxFQUFFLEtBQU07UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7OytHQVJVLGtCQUFrQjttR0FBbEIsa0JBQWtCLDZGQ3BGL0Isa3RDQTJCQTsyRkR5RGEsa0JBQWtCO2tCQUo5QixTQUFTOytCQUNFLGVBQWU7OEJBSWhCLElBQUk7c0JBQVosS0FBSztnQkFFRyxJQUFJO3NCQUFaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBJTlBVVC1URVhULnRzXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIGZvciBJbnB1dFRleHREYXRhXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSBpZCAocmVxdWlyZWQpXHJcbiAqIEBwcm9wZXJ0eSBwbGFjZWhvbGRlciAob3B0aW9uYWwpXHJcbiAqIEBwcm9wZXJ0eSB2YWx1ZSAob3B0aW9uYWwpXHJcbiAqIEBwcm9wZXJ0eSBsYWJlbCAob3B0aW9uYWwpXHJcbiAqIEBwcm9wZXJ0eSBkaXNhYmxlZCAob3B0aW9uYWwpXHJcbiAqIEBwcm9wZXJ0eSBpY29uIChvcHRpb25hbClcclxuICogQHByb3BlcnR5IGlucHV0UGF5bG9hZCAob3B0aW9uYWwpXHJcbiAqIEBwcm9wZXJ0eSBlbnRlclBheWxvYWQgKG9wdGlvbmFsKVxyXG4gKiBAcHJvcGVydHkgaWNvblBheWxvYWQgKG9wdGlvbmFsKVxyXG4gKiBAcHJvcGVydHkgY2xhc3NlcyAob3B0aW9uYWwpXHJcbiAqIEBwcm9wZXJ0eSBfbWV0YSAob3B0aW9uYWwpXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElucHV0VGV4dERhdGEge1xyXG4gIC8qKlxyXG4gICAqIFVuaXF1ZSBJRCBmb3IgdGhlIHRleHQgaW5wdXQgZWxlbWVudFxyXG4gICAqL1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogSW5wdXQgdHlwZVxyXG4gICAqL1xyXG4gIHR5cGU/OiAndGV4dCcgfCAnbnVtYmVyJztcclxuICAvKipcclxuICAgKiBQbGFjZWhvbGRlciB0ZXh0IGluc2lkZSB0aGUgaW5wdXQgYm94XHJcbiAgICovXHJcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCB2YWx1ZSBvZiB0aGUgaW5wdXQgYm94XHJcbiAgICovXHJcbiAgdmFsdWU/OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsO1xyXG4gIC8qKlxyXG4gICAqIExhYmVsIGZvciB0aGUgaW5wdXQgYm94XHJcbiAgICovXHJcbiAgbGFiZWw/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogUHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgaW5wdXQncyB2YWx1ZVxyXG4gICAqL1xyXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcclxuICAvKipcclxuICAgKiBPcHRpb25hbCBpY29uIHRvIHJlbmRlciBpbnNpZGUgdGhlIGlucHV0IGJveCAoZWcuIG43LWljb24tc2VhcmNoKVxyXG4gICAqL1xyXG4gIGljb24/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogUGF5bG9hZCB0aGF0IGlzIHNlbnQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSB2YWx1ZVxyXG4gICAqL1xyXG4gIGlucHV0UGF5bG9hZD86IGFueTtcclxuICAvKipcclxuICAgKiBQYXlsb2FkIHRoYXQgaXMgc2VudCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgdGhlIFwiRW50ZXJcIiBrZXlcclxuICAgKi9cclxuICBlbnRlclBheWxvYWQ/OiBhbnk7XHJcbiAgLyoqXHJcbiAgICogUGF5bG9hZCB0aGF0IGlzIHNlbnQgd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gdGhlIGljb25cclxuICAgKi9cclxuICBpY29uUGF5bG9hZD86IGFueTtcclxuICAvKipcclxuICAgKiBJbnB1dCBtaW5pbXVuIGFsbG93ZWQgdmFsdWUgKG9ubHkgZm9yIHR5cGU9bnVtYmVyKVxyXG4gICAqL1xyXG4gIG1pbj86IG51bWJlcjtcclxuICAvKipcclxuICAgKiBJbnB1dCBtYXhpbXVuIGFsbG93ZWQgdmFsdWUgKG9ubHkgZm9yIHR5cGU9bnVtYmVyKVxyXG4gICAqL1xyXG4gIG1heD86IG51bWJlcjtcclxuICAvKipcclxuICAgKiBBZGRpdGlvbmFsIEhUTUwgQ2xhc3Nlc1xyXG4gICAqL1xyXG4gIGNsYXNzZXM/OiBhbnk7XHJcbiAgLyoqXHJcbiAgICogQWRkaXRpb25hbCBkYXRhIGZvciB0aGUgY29tcG9uZW50J3MgbG9naWNcclxuICAgKi9cclxuICBfbWV0YT86IGFueTtcclxufVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduNy1pbnB1dC10ZXh0JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtdGV4dC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0Q29tcG9uZW50IHtcclxuICBASW5wdXQoKSBkYXRhOiBJbnB1dFRleHREYXRhO1xyXG5cclxuICBASW5wdXQoKSBlbWl0OiBhbnk7XHJcblxyXG4gIG9uQ2hhbmdlKGlucHV0UGF5bG9hZCwgdmFsdWU/KSB7XHJcbiAgICBpZiAoIXRoaXMuZW1pdCkgcmV0dXJuO1xyXG4gICAgdGhpcy5lbWl0KCdjaGFuZ2UnLCB7IGlucHV0UGF5bG9hZCwgdmFsdWUgfSk7XHJcbiAgfVxyXG59XHJcbiIsIjxkaXYgKm5nSWY9XCJkYXRhIGFzIGlucHV0XCJcclxuICAgICBjbGFzcz1cIm43LWlucHV0LXRleHRcIj5cclxuICAgIDxsYWJlbCAqbmdJZj1cImlucHV0LmxhYmVsXCJcclxuICAgICAgICBjbGFzcz1cIm43LWlucHV0LXRleHRfX2xhYmVsXCJcclxuICAgICAgICBmb3I9XCJ7eyBpbnB1dC5pZCB9fVwiPlxyXG4gICAgICAgIHt7IGlucHV0LmxhYmVsIH19XHJcbiAgICA8L2xhYmVsPlxyXG4gICAgPGRpdiBjbGFzcz1cIm43LWlucHV0LXRleHRfX3dyYXBwZXJcIlxyXG4gICAgICAgIFtuZ0NsYXNzXT1cIntcclxuICAgICAgICAgICAgJ2hhcy1pY29uJzogISFpbnB1dC5pY29uXHJcbiAgICAgICAgfVwiPlxyXG4gICAgICAgIDxpbnB1dCBpZD1cInt7IGlucHV0LmlkIH19XCJcclxuICAgICAgICAgICAgY2xhc3M9XCJuNy1pbnB1dC10ZXh0X190ZXh0IHt7aW5wdXQuY2xhc3NlcyB8fCAnJ319XCJcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ7e2lucHV0LnBsYWNlaG9sZGVyIHx8ICcnfX1cIlxyXG4gICAgICAgICAgICBbdHlwZV09XCJpbnB1dC50eXBlID8gaW5wdXQudHlwZSA6ICd0ZXh0J1wiXHJcbiAgICAgICAgICAgIFt2YWx1ZV09XCJpbnB1dC52YWx1ZSB8fCBudWxsXCJcclxuICAgICAgICAgICAgW2Rpc2FibGVkXT1cImlucHV0LmRpc2FibGVkXCJcclxuICAgICAgICAgICAgW21pbl09XCJpbnB1dC50eXBlID09PSAnbnVtYmVyJyAmJiAoaW5wdXQubWluIHx8IGlucHV0Lm1pbiA9PT0gMCkgPyBpbnB1dC5taW4gOiAnJ1wiXHJcbiAgICAgICAgICAgIFttYXhdPVwiaW5wdXQudHlwZSA9PT0gJ251bWJlcicgJiYgKGlucHV0Lm1heCB8fCBpbnB1dC5tYXggPT09IDApID8gaW5wdXQubWF4IDogJydcIlxyXG4gICAgICAgICAgICAoaW5wdXQpPVwib25DaGFuZ2UoaW5wdXQuaW5wdXRQYXlsb2FkLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVwiXHJcbiAgICAgICAgICAgIChrZXl1cC5lbnRlcik9XCJvbkNoYW5nZShpbnB1dC5lbnRlclBheWxvYWQsICRldmVudC50YXJnZXQudmFsdWUpXCI+XHJcbiAgICAgICAgPHNwYW4gKm5nSWY9XCJpbnB1dC5pY29uXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJuNy1pbnB1dC10ZXh0X19pY29uIHt7aW5wdXQuaWNvbiB8fCAnJ319XCJcclxuICAgICAgICAgICAgKGNsaWNrKT1cIm9uQ2hhbmdlKGlucHV0Lmljb25QYXlsb2FkKVwiPlxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgIDwvZGl2PlxyXG48L2Rpdj5cclxuIl19