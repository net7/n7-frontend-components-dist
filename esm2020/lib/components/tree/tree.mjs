//---------------------------
// TREE.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../anchor-wrapper/anchor-wrapper";
export class TreeComponent {
    onClick(payload) {
        if (!this.emit)
            return;
        this.emit('click', payload);
    }
}
TreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TreeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TreeComponent, selector: "n7-tree", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<div *ngIf=\"data\" class=\"n7-tree\">\n    <!-- Start recursive rendering -->\n    <ng-container *ngTemplateOutlet=\"recursiveTree; context:{$implicit: data.items}\"></ng-container>\n\n    <!-- Template for recursive children rendering -->\n    <ng-template #recursiveTree let-node>\n        <div class=\"n7-tree__item {{ item.classes || '' }}\" *ngFor=\"let item of node\">\n            <div class=\"n7-tree__item-contents\">\n                <!-- Render expand/collapse arrow -->\n                <span *ngIf=\"item.toggle\"\n                      class=\"n7-tree__item-toggle {{ item.toggle.icon }}\"\n                      (click)=\"onClick(item.toggle.payload)\">\n                </span>\n                <!-- Render the node -->\n                <n7-anchor-wrapper \n                [classes]=\"'n7-tree__item-details'\"\n                [data]=\"item.anchor\"\n                (clicked)=\"onClick($event)\">\n                    <span *ngIf=\"item.icon\" class=\"n7-tree__item-icon {{ item.icon }}\"></span>\n                    <img class=\"n7-tree__item-img\" *ngIf=\"item.img\" src=\"{{ item.img }}\" alt=\"{{ item.text }}\"/>\n                    <span class=\"n7-tree__item-text\">{{ item.text }}</span>\n                    <span class=\"n7-tree__item-right-icon {{ item.iconright }}\"></span>\n                </n7-anchor-wrapper>\n            </div>\n            <!-- Check for more child nodes and render them -->\n            <div class=\"n7-tree__children-wrapper\" *ngIf=\"item.items\">\n                <ng-container *ngTemplateOutlet=\"recursiveTree; context:{$implicit: item.items}\"></ng-container>\n            </div>\n        </div>\n    </ng-template>\n</div>", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.AnchorWrapperComponent, selector: "n7-anchor-wrapper", inputs: ["data", "classes"], outputs: ["clicked"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-tree', template: "<div *ngIf=\"data\" class=\"n7-tree\">\n    <!-- Start recursive rendering -->\n    <ng-container *ngTemplateOutlet=\"recursiveTree; context:{$implicit: data.items}\"></ng-container>\n\n    <!-- Template for recursive children rendering -->\n    <ng-template #recursiveTree let-node>\n        <div class=\"n7-tree__item {{ item.classes || '' }}\" *ngFor=\"let item of node\">\n            <div class=\"n7-tree__item-contents\">\n                <!-- Render expand/collapse arrow -->\n                <span *ngIf=\"item.toggle\"\n                      class=\"n7-tree__item-toggle {{ item.toggle.icon }}\"\n                      (click)=\"onClick(item.toggle.payload)\">\n                </span>\n                <!-- Render the node -->\n                <n7-anchor-wrapper \n                [classes]=\"'n7-tree__item-details'\"\n                [data]=\"item.anchor\"\n                (clicked)=\"onClick($event)\">\n                    <span *ngIf=\"item.icon\" class=\"n7-tree__item-icon {{ item.icon }}\"></span>\n                    <img class=\"n7-tree__item-img\" *ngIf=\"item.img\" src=\"{{ item.img }}\" alt=\"{{ item.text }}\"/>\n                    <span class=\"n7-tree__item-text\">{{ item.text }}</span>\n                    <span class=\"n7-tree__item-right-icon {{ item.iconright }}\"></span>\n                </n7-anchor-wrapper>\n            </div>\n            <!-- Check for more child nodes and render them -->\n            <div class=\"n7-tree__children-wrapper\" *ngIf=\"item.items\">\n                <ng-container *ngTemplateOutlet=\"recursiveTree; context:{$implicit: item.items}\"></ng-container>\n            </div>\n        </div>\n    </ng-template>\n</div>" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2R2LWNvbXBvbmVudHMtbGliL3NyYy9saWIvY29tcG9uZW50cy90cmVlL3RyZWUudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvdHJlZS90cmVlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLFVBQVU7QUFDViw2QkFBNkI7QUFFN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUErRWpELE1BQU0sT0FBTyxhQUFhO0lBS3hCLE9BQU8sQ0FBQyxPQUFPO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDOzswR0FUVSxhQUFhOzhGQUFiLGFBQWEsdUZDbkYxQix5cERBOEJNOzJGRHFETyxhQUFhO2tCQUp6QixTQUFTOytCQUNFLFNBQVM7OEJBSVYsSUFBSTtzQkFBWixLQUFLO2dCQUVHLElBQUk7c0JBQVosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUUkVFLnRzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmNob3IgfSBmcm9tICcuLi8uLi9zaGFyZWQtaW50ZXJmYWNlcyc7XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBUcmVlQ29tcG9uZW50J3MgXCJkYXRhXCJcbiAqXG4gKiBAcHJvcGVydHkgaGVhZGVyIChyZXF1aXJlZClcbiAqIC0gaWNvbiAocmVxdWlyZWQpXG4gKiAtIHRleHQgKHJlcXVpcmVkKVxuICogLSBjb2xsYXBzZUljb24gKHJlcXVpcmVkKVxuICogLSBjbGFzc2VzIChvcHRpb25hbClcbiAqIC0gcGF5bG9hZCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgaXRlbXMgKHJlcXVpcmVkKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyZWVEYXRhIHtcbiAgLyoqXG4gICAqIHRyZWUgb2YgaXRlbXNcbiAgICovXG4gIGl0ZW1zOiBUcmVlSXRlbVtdO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgdGhlIHNpbmdsZSBUcmVlQ29tcG9uZW50J3MgXCJJdGVtXCJcbiAqXG4gKiBAcHJvcGVydHkgaWNvbiAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgaW1nIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBjbGFzc2VzIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSB0ZXh0IChyZXF1aXJlZClcbiAqIEBwcm9wZXJ0eSBhbmNob3IgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IF9tZXRhIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBpdGVtcyAob3B0aW9uYWwpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJlZUl0ZW0ge1xuICAvKipcbiAgICogdGhlIG5vZGUncyB0b2dnbGUgYXJyb3csIHRvIGV4cGFuZCBhbmRcbiAgICogY29sbGFwc2UgaXQncyBjaGlsZCBub2Rlcy5cbiAgICovXG4gIHRvZ2dsZT86IHtcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgcGF5bG9hZD86IGFueTtcbiAgfTtcbiAgLyoqXG4gICAqIHRoZSBpdGVtJ3MgaWNvbiwgb25seSB1c2VkIG9uIGxlYWYgaXRlbXNcbiAgICovXG4gIGljb24/OiBzdHJpbmc7XG4gICAvKipcbiAgICogdGhlIGl0ZW0ncyByaWdodCBpY29uLCBvbmx5IHVzZWQgb24gdHJlZSBpdGVtc1xuICAgKi9cbiAgaWNvbnJpZ2h0Pzogc3RyaW5nO1xuICAvKipcbiAgICogdGhlIGl0ZW0ncyBpbWFnZSwgb25seSB1c2VkIG9uIGxlYWYgaXRlbXNcbiAgICovXG4gIGltZz86IHN0cmluZztcbiAgLyoqXG4gICAqIGFkZGl0aW9uYWwgaHRtbCBjbGFzc2VzXG4gICAqL1xuICBjbGFzc2VzPzogYW55O1xuICAvKipcbiAgICogdGhlIGl0ZW0ncyByZW5kZXJlZCB0ZXh0XG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBhbmNob3IgPGE+XG4gICAqL1xuICBhbmNob3I/OiBBbmNob3I7XG4gIC8qKlxuICAgKiBhZGRpdGlvbmFsIGluZm8gdXNlZnVsIGZvciB0aGUgY29tcG9uZW50J3MgbG9naWNcbiAgICovXG4gIF9tZXRhPzogYW55O1xuICAvKipcbiAgICogaXRlbSByZWN1cnNpb25cbiAgICovXG4gIGl0ZW1zPzogVHJlZUl0ZW1bXTtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbjctdHJlZScsXG4gIHRlbXBsYXRlVXJsOiAnLi90cmVlLmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRyZWVDb21wb25lbnQge1xuICBASW5wdXQoKSBkYXRhOiBUcmVlRGF0YTtcblxuICBASW5wdXQoKSBlbWl0OiBhbnk7XG5cbiAgb25DbGljayhwYXlsb2FkKSB7XG4gICAgaWYgKCF0aGlzLmVtaXQpIHJldHVybjtcblxuICAgIHRoaXMuZW1pdCgnY2xpY2snLCBwYXlsb2FkKTtcbiAgfVxufVxuIiwiPGRpdiAqbmdJZj1cImRhdGFcIiBjbGFzcz1cIm43LXRyZWVcIj5cbiAgICA8IS0tIFN0YXJ0IHJlY3Vyc2l2ZSByZW5kZXJpbmcgLS0+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInJlY3Vyc2l2ZVRyZWU7IGNvbnRleHQ6eyRpbXBsaWNpdDogZGF0YS5pdGVtc31cIj48L25nLWNvbnRhaW5lcj5cblxuICAgIDwhLS0gVGVtcGxhdGUgZm9yIHJlY3Vyc2l2ZSBjaGlsZHJlbiByZW5kZXJpbmcgLS0+XG4gICAgPG5nLXRlbXBsYXRlICNyZWN1cnNpdmVUcmVlIGxldC1ub2RlPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibjctdHJlZV9faXRlbSB7eyBpdGVtLmNsYXNzZXMgfHwgJycgfX1cIiAqbmdGb3I9XCJsZXQgaXRlbSBvZiBub2RlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibjctdHJlZV9faXRlbS1jb250ZW50c1wiPlxuICAgICAgICAgICAgICAgIDwhLS0gUmVuZGVyIGV4cGFuZC9jb2xsYXBzZSBhcnJvdyAtLT5cbiAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cIml0ZW0udG9nZ2xlXCJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm43LXRyZWVfX2l0ZW0tdG9nZ2xlIHt7IGl0ZW0udG9nZ2xlLmljb24gfX1cIlxuICAgICAgICAgICAgICAgICAgICAgIChjbGljayk9XCJvbkNsaWNrKGl0ZW0udG9nZ2xlLnBheWxvYWQpXCI+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwhLS0gUmVuZGVyIHRoZSBub2RlIC0tPlxuICAgICAgICAgICAgICAgIDxuNy1hbmNob3Itd3JhcHBlciBcbiAgICAgICAgICAgICAgICBbY2xhc3Nlc109XCInbjctdHJlZV9faXRlbS1kZXRhaWxzJ1wiXG4gICAgICAgICAgICAgICAgW2RhdGFdPVwiaXRlbS5hbmNob3JcIlxuICAgICAgICAgICAgICAgIChjbGlja2VkKT1cIm9uQ2xpY2soJGV2ZW50KVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cIml0ZW0uaWNvblwiIGNsYXNzPVwibjctdHJlZV9faXRlbS1pY29uIHt7IGl0ZW0uaWNvbiB9fVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cIm43LXRyZWVfX2l0ZW0taW1nXCIgKm5nSWY9XCJpdGVtLmltZ1wiIHNyYz1cInt7IGl0ZW0uaW1nIH19XCIgYWx0PVwie3sgaXRlbS50ZXh0IH19XCIvPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm43LXRyZWVfX2l0ZW0tdGV4dFwiPnt7IGl0ZW0udGV4dCB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJuNy10cmVlX19pdGVtLXJpZ2h0LWljb24ge3sgaXRlbS5pY29ucmlnaHQgfX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9uNy1hbmNob3Itd3JhcHBlcj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPCEtLSBDaGVjayBmb3IgbW9yZSBjaGlsZCBub2RlcyBhbmQgcmVuZGVyIHRoZW0gLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibjctdHJlZV9fY2hpbGRyZW4td3JhcHBlclwiICpuZ0lmPVwiaXRlbS5pdGVtc1wiPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJyZWN1cnNpdmVUcmVlOyBjb250ZXh0OnskaW1wbGljaXQ6IGl0ZW0uaXRlbXN9XCI+PC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbjwvZGl2PiJdfQ==