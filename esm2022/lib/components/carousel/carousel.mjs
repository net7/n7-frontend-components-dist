//---------------------------
// CAROUSEL.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../anchor-wrapper/anchor-wrapper";
export class CarouselComponent {
    constructor() {
        this.loaded = false;
        /**
         * API of the carousel component
         */
        this.api = {
            /**
             * Used to lazy-load video resources.
             * Call api.load.videos on DOMContentReady event
             */
            load: {
                /** Changes all data-src attributes to src and calls <video>.load() */
                videos: () => {
                    const sources = Array.from(
                    // gets all <source.lazy> tags
                    document
                        .getElementById(this.data.containerId)
                        .getElementsByClassName('lazy'));
                    sources.forEach((source) => {
                        const url = source.getAttribute('data-src'); // gets the video url
                        source.classList.remove('lazy'); // removes the lazy class
                        source.setAttribute('src', url); // sets the url to src attribute
                        source.removeAttribute('data-src'); // removes the data-src attribute
                        source.parentElement.load(); // loads the video
                    });
                },
            },
        };
    }
    ngAfterContentChecked() {
        if (!this.data || this.loaded)
            return;
        this.loaded = true;
        setTimeout(() => {
            const { containerId, libOptions } = this.data;
            import('latte-carousel').then((module) => {
                const { Carousel } = module;
                const chart = new Carousel(`#${containerId}`, libOptions);
                if (this.data.setInstance)
                    this.data.setInstance((d) => {
                        // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-unused-vars
                        d = chart;
                    });
                if (this.data.setComponentAPI)
                    this.data.setComponentAPI((d) => {
                        // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-unused-vars
                        d = this.api;
                    });
                this.addButtonEvents(this.data);
            });
        });
    }
    onClick(payload) {
        if (!this.emit)
            return;
        this.emit('click', payload);
    }
    /**
     * Function that adds the event listeners to each button.
     * This is needed because when "new Carousel()" is called the event listeners are lost.
     */
    addButtonEvents({ slides, containerId }) {
        // Build array of button-id's & payloads.
        const buttons = slides
            .map((slide, slideID) => ({
            // id = container id - index of the slide
            id: `${containerId}-${slideID}`,
            payload: ((slide.action || {}).anchor || {}).payload || undefined,
        }))
            .filter((btn) => btn.payload);
        // find each button's anchor-wrapper and attach the event to it.
        buttons.forEach((btn) => {
            document
                .querySelector(`#${btn.id}`)
                .parentElement.addEventListener('click', () => this.onClick(btn.payload));
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.2", ngImport: i0, type: CarouselComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.1.2", type: CarouselComponent, selector: "n7-carousel", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<button\n  *ngIf=\"data && data.classes === 'demo'\"\n  class=\"n7-btn\"\n  (click)=\"api.load.videos()\"\n>\n  api.load.videos()\n</button>\n\n<div *ngIf=\"data\" class=\"n7-carousel {{ data.classes || '' }}\">\n  <!-- Warning: Do not style div.latte-carousel -->\n  <div id=\"{{data.containerId}}\" class=\"latte-carousel\">\n    <ng-container *ngFor=\"let slide of data.slides; let index = index;\">\n      <ng-container\n        *ngTemplateOutlet=\"carouselSlide; context:{slide: slide, index: index}\"\n      ></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<!-- ===== SLIDE WRAPPER ===== -->\n<ng-template #carouselSlide let-slide=\"slide\" let-slideID=\"index\">\n  <!-- Warning: Do not style div.latte-item -->\n  <div class=\"latte-item\">\n    <div\n      class=\"n7-carousel__slide {{ slide.classes || ''}}\"\n      [ngClass]=\"{ 'has-image' : slide.background.image, 'has-video': slide.background.video }\"\n      [style.background-color]=\"slide.background.color ? slide.background.color : ''\"\n      [style.background-image]=\"slide.background.image ? 'url('+slide.background.image+')' : ''\"\n    >\n      <div class=\"n7-carousel__slide-content-wrapper\">\n        <div class=\"n7-carousel__slide-content\">\n          <div class=\"n7-carousel__slide-content-left\">\n            <ng-container\n              *ngTemplateOutlet=\"slideForeground; context:{items: slide.items, slideID: slideID}\"\n            >\n            </ng-container>\n          </div>\n          <div class=\"n7-carousel__slide-content-right\" *ngIf=\"slide.action\">\n            <n7-anchor-wrapper\n              [data]=\"slide.action.anchor\"\n              (clicked)=\"onClick($event)\"\n            >\n              <!-- Button ID's are used to dynamically reattach events after loading the carousel -->\n              <button\n                id=\"{{data.containerId}}-{{slideID}}\"\n                class=\"n7-hero__btn n7-btn n7-btn-cta n7-btn-l\"\n              >\n                {{slide.action.text}}\n              </button>\n            </n7-anchor-wrapper>\n            <ng-container\n              *ngTemplateOutlet=\"sideImage; context:{items: slide.items, slideID: slideID}\"\n            >\n            </ng-container>\n          </div>\n        </div>\n      </div>\n      <ng-container *ngIf=\"slide.background\">\n        <ng-container\n          *ngTemplateOutlet=\"slideBackground; context:{$implicit: slide.background}\"\n        >\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<!-- ===== SLIDE FOREGROUND ===== -->\n<ng-template #slideForeground let-items=\"items\" let-slideID=\"slideID\">\n  <ng-container *ngFor=\"let el of items; let itemID = index\">\n    <!-- title -->\n    <h1 class=\"n7-carousel__slide-title\" *ngIf=\"el.title\">{{el.title}}</h1>\n    <!-- text -->\n    <div\n      class=\"n7-carousel__slide-text\"\n      *ngIf=\"el.text\"\n      [innerHTML]=\"el.text\"\n    ></div>\n    <!-- image -->\n    <ng-container *ngIf=\"el.image as img\">\n      <img\n        class=\"n7-carousel__slide-img\"\n        [src]=\"img.src\"\n        [alt]=\"img.alt ?? ''\"\n        [ngClass]=\"img.classes\"\n      />\n    </ng-container>\n    <!-- metadata -->\n    <div class=\"n7-carousel__slide-metadata-wrapper\" *ngIf=\"el.metadata\">\n      <ng-container *ngFor=\"let m of el.metadata\">\n        <div class=\"n7-carousel__slide-metadata\">\n          <span class=\"n7-carousel__slide-metadata-label\" *ngIf=\"m.key\"\n            >{{m.key}}</span\n          >\n          <span class=\"n7-carousel__slide-metadata-value\" *ngIf=\"m.value\"\n            >{{m.value}}</span\n          >\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-template>\n\n<!-- ===== SIDE IMAGE ===== -->\n<ng-template #sideImage let-items=\"items\" let-slideID=\"slideID\">\n  <ng-container *ngFor=\"let el of items; let itemID = index\">\n    <!-- image -->\n    <ng-container *ngIf=\"el.image as img\">\n      <img\n        class=\"n7-carousel__side-img\"\n        [src]=\"img.src\"\n        [alt]=\"img.alt ?? ''\"\n        [ngClass]=\"img.classes\"\n      />\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<!-- ===== VIDEO BACKGROUND ===== -->\n<ng-template #slideBackground let-bg>\n  <ng-container *ngIf=\"bg.video as v\">\n    <video\n      #video\n      class=\"n7-carousel__slide-video\"\n      [poster]=\"v.poster\"\n      [height]=\"v.height\"\n      [width]=\"v.width\"\n      loop\n      muted\n      autoplay\n      playsinline\n    >\n      <source #source class=\"lazy\" [attr.data-src]=\"v.url\" type=\"video/mp4\" />\n    </video>\n    <div class=\"n7-carousel__slide-video-overlay\"></div>\n  </ng-container>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.AnchorWrapperComponent, selector: "n7-anchor-wrapper", inputs: ["data", "classes"], outputs: ["clicked"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.2", ngImport: i0, type: CarouselComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-carousel', template: "<button\n  *ngIf=\"data && data.classes === 'demo'\"\n  class=\"n7-btn\"\n  (click)=\"api.load.videos()\"\n>\n  api.load.videos()\n</button>\n\n<div *ngIf=\"data\" class=\"n7-carousel {{ data.classes || '' }}\">\n  <!-- Warning: Do not style div.latte-carousel -->\n  <div id=\"{{data.containerId}}\" class=\"latte-carousel\">\n    <ng-container *ngFor=\"let slide of data.slides; let index = index;\">\n      <ng-container\n        *ngTemplateOutlet=\"carouselSlide; context:{slide: slide, index: index}\"\n      ></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<!-- ===== SLIDE WRAPPER ===== -->\n<ng-template #carouselSlide let-slide=\"slide\" let-slideID=\"index\">\n  <!-- Warning: Do not style div.latte-item -->\n  <div class=\"latte-item\">\n    <div\n      class=\"n7-carousel__slide {{ slide.classes || ''}}\"\n      [ngClass]=\"{ 'has-image' : slide.background.image, 'has-video': slide.background.video }\"\n      [style.background-color]=\"slide.background.color ? slide.background.color : ''\"\n      [style.background-image]=\"slide.background.image ? 'url('+slide.background.image+')' : ''\"\n    >\n      <div class=\"n7-carousel__slide-content-wrapper\">\n        <div class=\"n7-carousel__slide-content\">\n          <div class=\"n7-carousel__slide-content-left\">\n            <ng-container\n              *ngTemplateOutlet=\"slideForeground; context:{items: slide.items, slideID: slideID}\"\n            >\n            </ng-container>\n          </div>\n          <div class=\"n7-carousel__slide-content-right\" *ngIf=\"slide.action\">\n            <n7-anchor-wrapper\n              [data]=\"slide.action.anchor\"\n              (clicked)=\"onClick($event)\"\n            >\n              <!-- Button ID's are used to dynamically reattach events after loading the carousel -->\n              <button\n                id=\"{{data.containerId}}-{{slideID}}\"\n                class=\"n7-hero__btn n7-btn n7-btn-cta n7-btn-l\"\n              >\n                {{slide.action.text}}\n              </button>\n            </n7-anchor-wrapper>\n            <ng-container\n              *ngTemplateOutlet=\"sideImage; context:{items: slide.items, slideID: slideID}\"\n            >\n            </ng-container>\n          </div>\n        </div>\n      </div>\n      <ng-container *ngIf=\"slide.background\">\n        <ng-container\n          *ngTemplateOutlet=\"slideBackground; context:{$implicit: slide.background}\"\n        >\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<!-- ===== SLIDE FOREGROUND ===== -->\n<ng-template #slideForeground let-items=\"items\" let-slideID=\"slideID\">\n  <ng-container *ngFor=\"let el of items; let itemID = index\">\n    <!-- title -->\n    <h1 class=\"n7-carousel__slide-title\" *ngIf=\"el.title\">{{el.title}}</h1>\n    <!-- text -->\n    <div\n      class=\"n7-carousel__slide-text\"\n      *ngIf=\"el.text\"\n      [innerHTML]=\"el.text\"\n    ></div>\n    <!-- image -->\n    <ng-container *ngIf=\"el.image as img\">\n      <img\n        class=\"n7-carousel__slide-img\"\n        [src]=\"img.src\"\n        [alt]=\"img.alt ?? ''\"\n        [ngClass]=\"img.classes\"\n      />\n    </ng-container>\n    <!-- metadata -->\n    <div class=\"n7-carousel__slide-metadata-wrapper\" *ngIf=\"el.metadata\">\n      <ng-container *ngFor=\"let m of el.metadata\">\n        <div class=\"n7-carousel__slide-metadata\">\n          <span class=\"n7-carousel__slide-metadata-label\" *ngIf=\"m.key\"\n            >{{m.key}}</span\n          >\n          <span class=\"n7-carousel__slide-metadata-value\" *ngIf=\"m.value\"\n            >{{m.value}}</span\n          >\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-template>\n\n<!-- ===== SIDE IMAGE ===== -->\n<ng-template #sideImage let-items=\"items\" let-slideID=\"slideID\">\n  <ng-container *ngFor=\"let el of items; let itemID = index\">\n    <!-- image -->\n    <ng-container *ngIf=\"el.image as img\">\n      <img\n        class=\"n7-carousel__side-img\"\n        [src]=\"img.src\"\n        [alt]=\"img.alt ?? ''\"\n        [ngClass]=\"img.classes\"\n      />\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<!-- ===== VIDEO BACKGROUND ===== -->\n<ng-template #slideBackground let-bg>\n  <ng-container *ngIf=\"bg.video as v\">\n    <video\n      #video\n      class=\"n7-carousel__slide-video\"\n      [poster]=\"v.poster\"\n      [height]=\"v.height\"\n      [width]=\"v.width\"\n      loop\n      muted\n      autoplay\n      playsinline\n    >\n      <source #source class=\"lazy\" [attr.data-src]=\"v.url\" type=\"video/mp4\" />\n    </video>\n    <div class=\"n7-carousel__slide-video-overlay\"></div>\n  </ng-container>\n</ng-template>\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,