//---------------------------
// INPUT-TEXT.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class InputTextComponent {
    onChange(inputPayload, value) {
        if (!this.emit)
            return;
        this.emit('change', { inputPayload, value });
    }
    onBlur() {
        if (!this.emit)
            return;
        this.emit('blur');
    }
    onFocus() {
        if (!this.emit)
            return;
        this.emit('focus');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.2", ngImport: i0, type: InputTextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.1.2", type: InputTextComponent, selector: "n7-input-text", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<div *ngIf=\"data as input\" class=\"n7-input-text\">\n  <label\n    *ngIf=\"input.label\"\n    class=\"n7-input-text__label\"\n    for=\"{{ input.id }}\"\n    [innerHTML]=\"input.label\"\n  >\n  </label>\n  <div\n    class=\"n7-input-text__wrapper\"\n    [ngClass]=\"{\n            'has-icon': !!input.icon\n        }\"\n  >\n    <input\n      id=\"{{ input.id }}\"\n      class=\"n7-input-text__text\"\n      [ngClass]=\"input.classes\"\n      [type]=\"input.type ? input.type : 'text'\"\n      [attr.name]=\"input.name\"\n      [value]=\"input.value || null\"\n      [attr.placeholder]=\"input.placeholder\"\n      [attr.autocomplete]=\"input.autocomplete\"\n      [disabled]=\"input.disabled\"\n      [required]=\"input.required\"\n      [attr.max]=\"input.max\"\n      [attr.min]=\"input.min\"\n      [attr.maxlength]=\"input.maxlength\"\n      [attr.minlength]=\"input.minlength\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n      (input)=\"onChange(input.inputPayload, $event.target.value)\"\n      (keyup.enter)=\"onChange(input.enterPayload, $event.target.value)\"\n    />\n    <span\n      *ngIf=\"input.icon\"\n      class=\"n7-input-text__icon {{input.icon || ''}}\"\n      (click)=\"onChange(input.iconPayload)\"\n    >\n    </span>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.2", ngImport: i0, type: InputTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-input-text', template: "<div *ngIf=\"data as input\" class=\"n7-input-text\">\n  <label\n    *ngIf=\"input.label\"\n    class=\"n7-input-text__label\"\n    for=\"{{ input.id }}\"\n    [innerHTML]=\"input.label\"\n  >\n  </label>\n  <div\n    class=\"n7-input-text__wrapper\"\n    [ngClass]=\"{\n            'has-icon': !!input.icon\n        }\"\n  >\n    <input\n      id=\"{{ input.id }}\"\n      class=\"n7-input-text__text\"\n      [ngClass]=\"input.classes\"\n      [type]=\"input.type ? input.type : 'text'\"\n      [attr.name]=\"input.name\"\n      [value]=\"input.value || null\"\n      [attr.placeholder]=\"input.placeholder\"\n      [attr.autocomplete]=\"input.autocomplete\"\n      [disabled]=\"input.disabled\"\n      [required]=\"input.required\"\n      [attr.max]=\"input.max\"\n      [attr.min]=\"input.min\"\n      [attr.maxlength]=\"input.maxlength\"\n      [attr.minlength]=\"input.minlength\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n      (input)=\"onChange(input.inputPayload, $event.target.value)\"\n      (keyup.enter)=\"onChange(input.enterPayload, $event.target.value)\"\n    />\n    <span\n      *ngIf=\"input.icon\"\n      class=\"n7-input-text__icon {{input.icon || ''}}\"\n      (click)=\"onChange(input.iconPayload)\"\n    >\n    </span>\n  </div>\n</div>\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2R2LWNvbXBvbmVudHMtbGliL3NyYy9saWIvY29tcG9uZW50cy9pbnB1dC10ZXh0L2lucHV0LXRleHQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLGdCQUFnQjtBQUNoQiw2QkFBNkI7QUFFN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQWtHakQsTUFBTSxPQUFPLGtCQUFrQjtJQUs3QixRQUFRLENBQUMsWUFBWSxFQUFFLEtBQU07UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLENBQUM7OEdBbEJVLGtCQUFrQjtrR0FBbEIsa0JBQWtCLDZGQ3RHL0IsZ3dDQTBDQTs7MkZENERhLGtCQUFrQjtrQkFKOUIsU0FBUzsrQkFDRSxlQUFlOzhCQUloQixJQUFJO3NCQUFaLEtBQUs7Z0JBRUcsSUFBSTtzQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIElOUFVULVRFWFQudHNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9uT2ZmIH0gZnJvbSAnLi4vLi4vc2hhcmVkLWludGVyZmFjZXMnO1xuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgSW5wdXRUZXh0RGF0YVxuICpcbiAqIEBwcm9wZXJ0eSBpZCAocmVxdWlyZWQpXG4gKiBAcHJvcGVydHkgcGxhY2Vob2xkZXIgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IHZhbHVlIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBsYWJlbCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgZGlzYWJsZWQgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IGljb24gKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IGlucHV0UGF5bG9hZCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgZW50ZXJQYXlsb2FkIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBpY29uUGF5bG9hZCAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgY2xhc3NlcyAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgX21ldGEgKG9wdGlvbmFsKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0VGV4dERhdGEge1xuICAvKipcbiAgICogVW5pcXVlIElEIGZvciB0aGUgdGV4dCBpbnB1dCBlbGVtZW50XG4gICAqL1xuICBpZDogc3RyaW5nO1xuICAvKipcbiAgICogSW5wdXQgdHlwZVxuICAgKi9cbiAgdHlwZT86ICd0ZXh0JyB8ICdudW1iZXInO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGNvbnRyb2wuXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogQSBoaW50IHRvIHRoZSB1c2VyIG9mIHdoYXQgY2FuIGJlIGVudGVyZWQgaW4gdGhlIGNvbnRyb2wuXG4gICAqL1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgLyoqXG4gICAqIERlZmF1bHQgdmFsdWUgb2YgdGhlIGlucHV0IGJveFxuICAgKi9cbiAgdmFsdWU/OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsO1xuICAvKipcbiAgICogTGFiZWwgZm9yIHRoZSBpbnB1dCBib3hcbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xuICAvKipcbiAgICogUHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgaW5wdXQncyB2YWx1ZVxuICAgKi9cbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAvKipcbiAgICogT3B0aW9uYWwgaWNvbiB0byByZW5kZXIgaW5zaWRlIHRoZSBpbnB1dCBib3ggKGVnLiBuNy1pY29uLXNlYXJjaClcbiAgICovXG4gIGljb24/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBQYXlsb2FkIHRoYXQgaXMgc2VudCB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIHZhbHVlXG4gICAqL1xuICBpbnB1dFBheWxvYWQ/OiBhbnk7XG4gIC8qKlxuICAgKiBQYXlsb2FkIHRoYXQgaXMgc2VudCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgdGhlIFwiRW50ZXJcIiBrZXlcbiAgICovXG4gIGVudGVyUGF5bG9hZD86IGFueTtcbiAgLyoqXG4gICAqIFBheWxvYWQgdGhhdCBpcyBzZW50IHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBpY29uXG4gICAqL1xuICBpY29uUGF5bG9hZD86IGFueTtcbiAgLyoqXG4gICAqIElucHV0IG1pbmltdW4gYWxsb3dlZCB2YWx1ZSAob25seSBmb3IgdHlwZT1udW1iZXIpXG4gICAqL1xuICBtaW4/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBJbnB1dCBtYXhpbXVuIGFsbG93ZWQgdmFsdWUgKG9ubHkgZm9yIHR5cGU9bnVtYmVyKVxuICAgKi9cbiAgbWF4PzogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgKFVURi0xNiBjb2RlIHVuaXRzKSB0aGF0IHRoZSB1c2VyIGNhbiBlbnRlci5cbiAgICogSWYgdGhpcyB2YWx1ZSBpc24ndCBzcGVjaWZpZWQsIHRoZSB1c2VyIGNhbiBlbnRlciBhbiB1bmxpbWl0ZWQgbnVtYmVyIG9mIGNoYXJhY3RlcnMuXG4gICAqL1xuICBtYXhsZW5ndGg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyAoVVRGLTE2IGNvZGUgdW5pdHMpIHJlcXVpcmVkIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGVudGVyLlxuICAgKi9cbiAgbWlubGVuZ3RoPzogbnVtYmVyO1xuICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHZhbHVlIG9mIHRoZSBjb250cm9sIGNhbiBiZSBhdXRvbWF0aWNhbGx5IGNvbXBsZXRlZCBieSB0aGUgYnJvd3Nlci4gKi9cbiAgYXV0b2NvbXBsZXRlPzogT25PZmY7XG4gIC8qKiBTcGVjaWZpZXMgdGhhdCB0aGUgdXNlciBtdXN0IGZpbGwgaW4gYSB2YWx1ZSBiZWZvcmUgc3VibWl0dGluZyBhIGZvcm0uICovXG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgSFRNTCBDbGFzc2VzXG4gICAqL1xuICBjbGFzc2VzPzogYW55O1xuICAvKipcbiAgICogQWRkaXRpb25hbCBkYXRhIGZvciB0aGUgY29tcG9uZW50J3MgbG9naWNcbiAgICovXG4gIF9tZXRhPzogYW55O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduNy1pbnB1dC10ZXh0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LXRleHQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIElucHV0VGV4dENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGRhdGE6IElucHV0VGV4dERhdGE7XG5cbiAgQElucHV0KCkgZW1pdDogYW55O1xuXG4gIG9uQ2hhbmdlKGlucHV0UGF5bG9hZCwgdmFsdWU/KSB7XG4gICAgaWYgKCF0aGlzLmVtaXQpIHJldHVybjtcbiAgICB0aGlzLmVtaXQoJ2NoYW5nZScsIHsgaW5wdXRQYXlsb2FkLCB2YWx1ZSB9KTtcbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICBpZiAoIXRoaXMuZW1pdCkgcmV0dXJuO1xuICAgIHRoaXMuZW1pdCgnYmx1cicpO1xuICB9XG5cbiAgb25Gb2N1cygpIHtcbiAgICBpZiAoIXRoaXMuZW1pdCkgcmV0dXJuO1xuICAgIHRoaXMuZW1pdCgnZm9jdXMnKTtcbiAgfVxufVxuIiwiPGRpdiAqbmdJZj1cImRhdGEgYXMgaW5wdXRcIiBjbGFzcz1cIm43LWlucHV0LXRleHRcIj5cbiAgPGxhYmVsXG4gICAgKm5nSWY9XCJpbnB1dC5sYWJlbFwiXG4gICAgY2xhc3M9XCJuNy1pbnB1dC10ZXh0X19sYWJlbFwiXG4gICAgZm9yPVwie3sgaW5wdXQuaWQgfX1cIlxuICAgIFtpbm5lckhUTUxdPVwiaW5wdXQubGFiZWxcIlxuICA+XG4gIDwvbGFiZWw+XG4gIDxkaXZcbiAgICBjbGFzcz1cIm43LWlucHV0LXRleHRfX3dyYXBwZXJcIlxuICAgIFtuZ0NsYXNzXT1cIntcbiAgICAgICAgICAgICdoYXMtaWNvbic6ICEhaW5wdXQuaWNvblxuICAgICAgICB9XCJcbiAgPlxuICAgIDxpbnB1dFxuICAgICAgaWQ9XCJ7eyBpbnB1dC5pZCB9fVwiXG4gICAgICBjbGFzcz1cIm43LWlucHV0LXRleHRfX3RleHRcIlxuICAgICAgW25nQ2xhc3NdPVwiaW5wdXQuY2xhc3Nlc1wiXG4gICAgICBbdHlwZV09XCJpbnB1dC50eXBlID8gaW5wdXQudHlwZSA6ICd0ZXh0J1wiXG4gICAgICBbYXR0ci5uYW1lXT1cImlucHV0Lm5hbWVcIlxuICAgICAgW3ZhbHVlXT1cImlucHV0LnZhbHVlIHx8IG51bGxcIlxuICAgICAgW2F0dHIucGxhY2Vob2xkZXJdPVwiaW5wdXQucGxhY2Vob2xkZXJcIlxuICAgICAgW2F0dHIuYXV0b2NvbXBsZXRlXT1cImlucHV0LmF1dG9jb21wbGV0ZVwiXG4gICAgICBbZGlzYWJsZWRdPVwiaW5wdXQuZGlzYWJsZWRcIlxuICAgICAgW3JlcXVpcmVkXT1cImlucHV0LnJlcXVpcmVkXCJcbiAgICAgIFthdHRyLm1heF09XCJpbnB1dC5tYXhcIlxuICAgICAgW2F0dHIubWluXT1cImlucHV0Lm1pblwiXG4gICAgICBbYXR0ci5tYXhsZW5ndGhdPVwiaW5wdXQubWF4bGVuZ3RoXCJcbiAgICAgIFthdHRyLm1pbmxlbmd0aF09XCJpbnB1dC5taW5sZW5ndGhcIlxuICAgICAgKGZvY3VzKT1cIm9uRm9jdXMoKVwiXG4gICAgICAoYmx1cik9XCJvbkJsdXIoKVwiXG4gICAgICAoaW5wdXQpPVwib25DaGFuZ2UoaW5wdXQuaW5wdXRQYXlsb2FkLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVwiXG4gICAgICAoa2V5dXAuZW50ZXIpPVwib25DaGFuZ2UoaW5wdXQuZW50ZXJQYXlsb2FkLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVwiXG4gICAgLz5cbiAgICA8c3BhblxuICAgICAgKm5nSWY9XCJpbnB1dC5pY29uXCJcbiAgICAgIGNsYXNzPVwibjctaW5wdXQtdGV4dF9faWNvbiB7e2lucHV0Lmljb24gfHwgJyd9fVwiXG4gICAgICAoY2xpY2spPVwib25DaGFuZ2UoaW5wdXQuaWNvblBheWxvYWQpXCJcbiAgICA+XG4gICAgPC9zcGFuPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19