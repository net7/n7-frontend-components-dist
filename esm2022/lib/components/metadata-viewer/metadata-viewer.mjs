//---------------------------
// METADATA-VIEWER.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class MetadataViewerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.2", ngImport: i0, type: MetadataViewerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.1.2", type: MetadataViewerComponent, selector: "n7-metadata-viewer", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<div *ngIf=\"data\" class=\"n7-metadata-viewer\">\n  <!-- Metadata groups wrapper -->\n  <div\n    class=\"n7-metadata-viewer__wrapper {{ data.classes  || ''}}\"\n    *ngFor=\"let grp of data.group\"\n  >\n    <!-- For each data group, render it -->\n    <ng-container\n      *ngTemplateOutlet=\"group; context:{$implicit: grp}\"\n    ></ng-container>\n  </div>\n</div>\n\n<!-- Template for Metadata.group -->\n<ng-template #group let-grp>\n  <div\n    *ngIf=\"grp.title || grp.items\"\n    class=\"n7-metadata-viewer__group {{ grp.classes || '' }}\"\n  >\n    <div class=\"n7-metadata-viewer__group-title\" *ngIf=\"grp.title\">\n      {{grp.title}}\n    </div>\n    <div class=\"n7-metadata-viewer__group-content\" *ngIf=\"grp.items\">\n      <div class=\"n7-metadata-viewer__item\" *ngFor=\"let i of grp.items\">\n        <span *ngIf=\"i.label\" class=\"n7-metadata-viewer__item-label\"\n          >{{ i.label }}</span\n        >\n        <span\n          *ngIf=\"i.value\"\n          class=\"n7-metadata-viewer__item-value\"\n          [innerHTML]=\"i.value\"\n        ></span>\n      </div>\n    </div>\n  </div>\n  <!-- Render all child groups -->\n  <div *ngIf=\"grp.group\">\n    <div\n      class=\"n7-metadata-viewer__group-wrapper\"\n      *ngFor=\"let grp of grp.group\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"group; context:{$implicit: grp}\"\n      ></ng-container>\n    </div>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.2", ngImport: i0, type: MetadataViewerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-metadata-viewer', template: "<div *ngIf=\"data\" class=\"n7-metadata-viewer\">\n  <!-- Metadata groups wrapper -->\n  <div\n    class=\"n7-metadata-viewer__wrapper {{ data.classes  || ''}}\"\n    *ngFor=\"let grp of data.group\"\n  >\n    <!-- For each data group, render it -->\n    <ng-container\n      *ngTemplateOutlet=\"group; context:{$implicit: grp}\"\n    ></ng-container>\n  </div>\n</div>\n\n<!-- Template for Metadata.group -->\n<ng-template #group let-grp>\n  <div\n    *ngIf=\"grp.title || grp.items\"\n    class=\"n7-metadata-viewer__group {{ grp.classes || '' }}\"\n  >\n    <div class=\"n7-metadata-viewer__group-title\" *ngIf=\"grp.title\">\n      {{grp.title}}\n    </div>\n    <div class=\"n7-metadata-viewer__group-content\" *ngIf=\"grp.items\">\n      <div class=\"n7-metadata-viewer__item\" *ngFor=\"let i of grp.items\">\n        <span *ngIf=\"i.label\" class=\"n7-metadata-viewer__item-label\"\n          >{{ i.label }}</span\n        >\n        <span\n          *ngIf=\"i.value\"\n          class=\"n7-metadata-viewer__item-value\"\n          [innerHTML]=\"i.value\"\n        ></span>\n      </div>\n    </div>\n  </div>\n  <!-- Render all child groups -->\n  <div *ngIf=\"grp.group\">\n    <div\n      class=\"n7-metadata-viewer__group-wrapper\"\n      *ngFor=\"let grp of grp.group\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"group; context:{$implicit: grp}\"\n      ></ng-container>\n    </div>\n  </div>\n</ng-template>\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEtdmlld2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZHYtY29tcG9uZW50cy1saWIvc3JjL2xpYi9jb21wb25lbnRzL21ldGFkYXRhLXZpZXdlci9tZXRhZGF0YS12aWV3ZXIudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdi1jb21wb25lbnRzLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvbWV0YWRhdGEtdmlld2VyL21ldGFkYXRhLXZpZXdlci5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QjtBQUM3QixxQkFBcUI7QUFDckIsNkJBQTZCO0FBRTdCLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFtRWpELE1BQU0sT0FBTyx1QkFBdUI7OEdBQXZCLHVCQUF1QjtrR0FBdkIsdUJBQXVCLGtHQ3ZFcEMsODVDQStDQTs7MkZEd0JhLHVCQUF1QjtrQkFKbkMsU0FBUzsrQkFDRSxvQkFBb0I7OEJBSXJCLElBQUk7c0JBQVosS0FBSztnQkFFRyxJQUFJO3NCQUFaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTUVUQURBVEEtVklFV0VSLnRzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBNZXRhZGF0YVZpZXdlckNvbXBvbmVudCdzIFwiaXRlbXNcIlxuICogQHByb3BlcnR5IGxhYmVsIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSB2YWx1ZSAob3B0aW9uYWwpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFWaWV3ZXJJdGVtcyB7XG4gIC8qKlxuICAgKiB0aGUgaXRlbSdzIGxhYmVsXG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcbiAgLyoqXG4gICAqIHRoZSB2YWx1ZSBmb3IgQHByb3BlcnR5IGxhYmVsXG4gICAqL1xuICB2YWx1ZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIE1ldGFkYXRhVmlld2VyQ29tcG9uZW50J3MgXCJjaGlsZCBncm91cHNcIlxuICpcbiAqIEBwcm9wZXJ0eSB0aXRsZSAob3B0aW9uYWwpXG4gKiBAcHJvcGVydHkgaXRlbXMgKG9wdGlvbmFsKVxuICogQHByb3BlcnR5IGdyb3VwIChvcHRpb25hbClcbiAqIEBwcm9wZXJ0eSBjbGFzc2VzIChvcHRpb25hbClcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YVZpZXdlckNoaWxkR3JvdXBzIHtcbiAgLyoqXG4gICAqIGNvbXBvbmVudCBoZWFkZXIgKGlmIHJvb3QpXG4gICAqIG9yIGdyb3VwIHRpdGxlXG4gICAqL1xuICB0aXRsZT86IHN0cmluZztcbiAgLyoqXG4gICAqIHRoZSBtZXRhZGF0YSBpdGVtc1xuICAgKi9cbiAgaXRlbXM/OiBNZXRhZGF0YVZpZXdlckl0ZW1zW107XG4gIC8qKlxuICAgKiB0aGUgQ0hJTEQgbWV0YWRhdGEgZ3JvdXBzXG4gICAqL1xuICBncm91cD86IE1ldGFkYXRhVmlld2VyQ2hpbGRHcm91cHNbXTtcbiAgLyoqXG4gICAqIGFkZGl0aW9uYWwgaHRtbCBjbGFzc2VzXG4gICAqL1xuICBjbGFzc2VzPzogYW55O1xufVxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgTWV0YWRhdGFWaWV3ZXJDb21wb25lbnQncyBcImRhdGFcIlxuICpcbiAqIEBwcm9wZXJ0eSBncm91cCAocmVxdWlyZWQpXG4gKiBAcHJvcGVydHkgY2xhc3NlcyAob3B0aW9uYWwpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFWaWV3ZXJEYXRhIHtcbiAgLyoqXG4gICAqIHRoZSBDSElMRCBtZXRhZGF0YSBncm91cHNcbiAgICovXG4gIGdyb3VwOiBNZXRhZGF0YVZpZXdlckNoaWxkR3JvdXBzW107XG4gIC8qKlxuICAgKiBhZGRpdGlvbmFsIGh0bWwgY2xhc3Nlc1xuICAgKi9cbiAgY2xhc3Nlcz86IGFueTtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbjctbWV0YWRhdGEtdmlld2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21ldGFkYXRhLXZpZXdlci5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFWaWV3ZXJDb21wb25lbnQge1xuICBASW5wdXQoKSBkYXRhOiBNZXRhZGF0YVZpZXdlckRhdGE7XG5cbiAgQElucHV0KCkgZW1pdDogYW55O1xufVxuIiwiPGRpdiAqbmdJZj1cImRhdGFcIiBjbGFzcz1cIm43LW1ldGFkYXRhLXZpZXdlclwiPlxuICA8IS0tIE1ldGFkYXRhIGdyb3VwcyB3cmFwcGVyIC0tPlxuICA8ZGl2XG4gICAgY2xhc3M9XCJuNy1tZXRhZGF0YS12aWV3ZXJfX3dyYXBwZXIge3sgZGF0YS5jbGFzc2VzICB8fCAnJ319XCJcbiAgICAqbmdGb3I9XCJsZXQgZ3JwIG9mIGRhdGEuZ3JvdXBcIlxuICA+XG4gICAgPCEtLSBGb3IgZWFjaCBkYXRhIGdyb3VwLCByZW5kZXIgaXQgLS0+XG4gICAgPG5nLWNvbnRhaW5lclxuICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJncm91cDsgY29udGV4dDp7JGltcGxpY2l0OiBncnB9XCJcbiAgICA+PC9uZy1jb250YWluZXI+XG4gIDwvZGl2PlxuPC9kaXY+XG5cbjwhLS0gVGVtcGxhdGUgZm9yIE1ldGFkYXRhLmdyb3VwIC0tPlxuPG5nLXRlbXBsYXRlICNncm91cCBsZXQtZ3JwPlxuICA8ZGl2XG4gICAgKm5nSWY9XCJncnAudGl0bGUgfHwgZ3JwLml0ZW1zXCJcbiAgICBjbGFzcz1cIm43LW1ldGFkYXRhLXZpZXdlcl9fZ3JvdXAge3sgZ3JwLmNsYXNzZXMgfHwgJycgfX1cIlxuICA+XG4gICAgPGRpdiBjbGFzcz1cIm43LW1ldGFkYXRhLXZpZXdlcl9fZ3JvdXAtdGl0bGVcIiAqbmdJZj1cImdycC50aXRsZVwiPlxuICAgICAge3tncnAudGl0bGV9fVxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJuNy1tZXRhZGF0YS12aWV3ZXJfX2dyb3VwLWNvbnRlbnRcIiAqbmdJZj1cImdycC5pdGVtc1wiPlxuICAgICAgPGRpdiBjbGFzcz1cIm43LW1ldGFkYXRhLXZpZXdlcl9faXRlbVwiICpuZ0Zvcj1cImxldCBpIG9mIGdycC5pdGVtc1wiPlxuICAgICAgICA8c3BhbiAqbmdJZj1cImkubGFiZWxcIiBjbGFzcz1cIm43LW1ldGFkYXRhLXZpZXdlcl9faXRlbS1sYWJlbFwiXG4gICAgICAgICAgPnt7IGkubGFiZWwgfX08L3NwYW5cbiAgICAgICAgPlxuICAgICAgICA8c3BhblxuICAgICAgICAgICpuZ0lmPVwiaS52YWx1ZVwiXG4gICAgICAgICAgY2xhc3M9XCJuNy1tZXRhZGF0YS12aWV3ZXJfX2l0ZW0tdmFsdWVcIlxuICAgICAgICAgIFtpbm5lckhUTUxdPVwiaS52YWx1ZVwiXG4gICAgICAgID48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDwhLS0gUmVuZGVyIGFsbCBjaGlsZCBncm91cHMgLS0+XG4gIDxkaXYgKm5nSWY9XCJncnAuZ3JvdXBcIj5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cIm43LW1ldGFkYXRhLXZpZXdlcl9fZ3JvdXAtd3JhcHBlclwiXG4gICAgICAqbmdGb3I9XCJsZXQgZ3JwIG9mIGdycC5ncm91cFwiXG4gICAgPlxuICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAqbmdUZW1wbGF0ZU91dGxldD1cImdyb3VwOyBjb250ZXh0OnskaW1wbGljaXQ6IGdycH1cIlxuICAgICAgPjwvbmctY29udGFpbmVyPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=