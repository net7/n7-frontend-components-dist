//---------------------------
// IMAGE-VIEWER.ts
//---------------------------
import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * ImageViewerComponent <n7-image-viewer>
 *
 */
export class ImageViewerComponent {
    constructor() {
        this._loaded = false;
    }
    ngAfterContentChecked() {
        if (!this.data || this._loaded)
            return;
        this._loaded = true;
        setTimeout(() => {
            const prefixUrl = !this.data.prefixUrl
                ? '//openseadragon.github.io/openseadragon/images/'
                : this.data.prefixUrl;
            import('openseadragon').then((module) => {
                const { default: openseadragon } = module;
                const viewer = openseadragon({
                    id: this.data.viewerId,
                    prefixUrl,
                    tileSources: this.data.images,
                    zoomInButton: 'n7-image-viewer-zoom-in',
                    zoomOutButton: 'n7-image-viewer-zoom-out',
                    homeButton: 'n7-image-viewer-home',
                    fullPageButton: 'n7-image-viewer-full-screen',
                    nextButton: 'n7-image-viewer-nav-next',
                    previousButton: 'n7-image-viewer-nav-prev',
                    ...this.data.libOptions,
                });
                this.data._setViewer(viewer);
            });
        });
    }
    onClick(payload) {
        if (!this.emit)
            return;
        this.emit('thumbclick', payload);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.2", ngImport: i0, type: ImageViewerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.1.2", type: ImageViewerComponent, selector: "n7-image-viewer", inputs: { data: "data", emit: "emit" }, ngImport: i0, template: "<div *ngIf=\"data\" class=\"n7-image-viewer {{data.classes || ''}}\">\n  <!-- OSD viewer -->\n  <div id=\"{{data.viewerId}}\" class=\"n7-image-viewer__viewer\"></div>\n\n  <!-- Zoom controls -->\n  <div class=\"n7-image-viewer__controls\">\n    <ul class=\"n7-image-viewer__controls-list\">\n      <li class=\"n7-image-viewer__controls-item\" id=\"n7-image-viewer-zoom-in\">\n        <span class=\"n7-icon-search-plus\"></span>\n      </li>\n      <li class=\"n7-image-viewer__controls-item\" id=\"n7-image-viewer-zoom-out\">\n        <span class=\"n7-icon-search-minus\"></span>\n      </li>\n      <!--\n            <li class=\"n7-image-viewer__controls-item\" id=\"n7-image-viewer-full-screen\">\n                <span class=\"n7-icon-expand-arrows\"></span>\n            </li>\n            -->\n    </ul>\n  </div>\n\n  <!-- Navigation -->\n  <div\n    *ngIf=\"!data.hideNavigation\"\n    class=\"n7-image-viewer__prev\"\n    id=\"n7-image-viewer-nav-prev\"\n  >\n    <span class=\"n7-icon-angle-left\"></span>\n  </div>\n\n  <div\n    *ngIf=\"!data.hideNavigation\"\n    class=\"n7-image-viewer__next\"\n    id=\"n7-image-viewer-nav-next\"\n  >\n    <span class=\"n7-icon-angle-right\"></span>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.2", ngImport: i0, type: ImageViewerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'n7-image-viewer', template: "<div *ngIf=\"data\" class=\"n7-image-viewer {{data.classes || ''}}\">\n  <!-- OSD viewer -->\n  <div id=\"{{data.viewerId}}\" class=\"n7-image-viewer__viewer\"></div>\n\n  <!-- Zoom controls -->\n  <div class=\"n7-image-viewer__controls\">\n    <ul class=\"n7-image-viewer__controls-list\">\n      <li class=\"n7-image-viewer__controls-item\" id=\"n7-image-viewer-zoom-in\">\n        <span class=\"n7-icon-search-plus\"></span>\n      </li>\n      <li class=\"n7-image-viewer__controls-item\" id=\"n7-image-viewer-zoom-out\">\n        <span class=\"n7-icon-search-minus\"></span>\n      </li>\n      <!--\n            <li class=\"n7-image-viewer__controls-item\" id=\"n7-image-viewer-full-screen\">\n                <span class=\"n7-icon-expand-arrows\"></span>\n            </li>\n            -->\n    </ul>\n  </div>\n\n  <!-- Navigation -->\n  <div\n    *ngIf=\"!data.hideNavigation\"\n    class=\"n7-image-viewer__prev\"\n    id=\"n7-image-viewer-nav-prev\"\n  >\n    <span class=\"n7-icon-angle-left\"></span>\n  </div>\n\n  <div\n    *ngIf=\"!data.hideNavigation\"\n    class=\"n7-image-viewer__next\"\n    id=\"n7-image-viewer-nav-next\"\n  >\n    <span class=\"n7-icon-angle-right\"></span>\n  </div>\n</div>\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], emit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,