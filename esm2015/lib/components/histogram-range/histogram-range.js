/* eslint-disable @typescript-eslint/no-use-before-define */
//---------------------------
// HISTOGRAM-RANGE.ts
//---------------------------
import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import dayjs from 'dayjs';
import objectSupport from 'dayjs/plugin/objectSupport';
let HistogramRangeComponent = class HistogramRangeComponent {
    constructor() {
        this._loaded = false;
        this.draw = () => {
            const { d3 } = this;
            const { width, margin, height, years, colours, containerId, innerRange } = this.data;
            if (innerRange) {
                const { unit, amount } = innerRange;
                dayjs.extend(objectSupport);
                years.forEach((year) => {
                    year.end = dayjs({ y: year.key })
                        .add(amount, unit)
                        .year();
                });
            }
            // Helpers - Start:
            const YEARtoX = d3
                .scaleBand()
                .domain(years.map((d) => d.key))
                .range([0, width])
                .paddingInner(0.17)
                .paddingOuter(1);
            const XtoYEAR = (value) => {
                const domain = YEARtoX.domain();
                const paddingOuter = YEARtoX(domain[0]);
                const eachBand = YEARtoX.step();
                const index = Math.floor(((value - paddingOuter) / eachBand));
                return domain[Math.max(0, Math.min(index, domain.length - 1))];
            };
            const YEARtoRANGE = (year) => {
                const { unit, amount } = innerRange;
                const start = dayjs({ y: year });
                const end = start.add(amount - 1, unit);
                return `${start.format('YYYY')}${end.format('/YY')}`;
            };
            // YEAR SELECTION CIRCLES
            let yearBalls = d3
                .extent(years, (d) => d.key)
                .map((d) => ({ x: YEARtoX(d) + YEARtoX.bandwidth() / 2, y: height }));
            function isInRange(y) {
                const allYears = yearBalls.map((d) => XtoYEAR(d.x));
                if (y >= d3.min(allYears) && y <= d3.max(allYears))
                    return true;
                return false;
            }
            function colourBars(d) {
                if (isInRange(d.key))
                    return 'url(#gradient)';
                return '#e3e3e3';
            }
            function getSelectedRange() {
                const range = d3.sort(yearBalls.map((d) => XtoYEAR(d.x)));
                if (!innerRange)
                    return range;
                const { unit, amount } = innerRange;
                const end = dayjs({ y: range[1] }).add(amount - 1, unit).year();
                return [range[0], end];
            }
            // Helpers - End.
            const svg = d3
                .select(`#${containerId}`)
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom);
            const scaleHeight = d3
                .scaleSymlog() // most similar scale to the original
                .domain([0, d3.max(years, (d) => d.count)])
                .range([height, 0]);
            // GRADIENT
            const defs = svg.append('defs'); // definitions
            const gradient = defs
                .append('linearGradient')
                .attr('id', 'gradient')
                .attr('gradientUnits', 'userSpaceOnUse')
                .attr('x1', 0)
                .attr('y1', height)
                .attr('x2', 0)
                .attr('y2', margin.top);
            gradient
                .append('stop')
                .attr('class', 'start')
                .attr('offset', '0%')
                .attr('stop-color', colours.bottom) // bottom gradient
                .attr('stop-opacity', 1);
            gradient
                .append('stop')
                .attr('class', 'end')
                .attr('offset', '100%')
                .attr('stop-color', colours.top) // top gradient
                .attr('stop-opacity', 1);
            // DRAW INSIDE MARGINS
            const g = svg
                .append('g')
                .attr('class', 'chart')
                .attr('transform', `translate(${margin.left},${margin.top})`);
            const barsLayer = g.append('g').attr('class', 'bars');
            const controlsLayer = g.append('g').attr('class', 'controls');
            // BAR CHART
            barsLayer // bars
                .selectAll('rect.bars')
                .data(years)
                .join('rect')
                .attr('class', 'bars')
                .attr('width', YEARtoX.bandwidth)
                .attr('height', (d) => height - scaleHeight(d.count))
                .attr('y', (d) => scaleHeight(d.count))
                .attr('x', (d) => YEARtoX(d.key))
                .attr('fill', 'url(#gradient)');
            barsLayer // overlay
                .append('rect')
                .attr('width', width)
                .attr('height', height)
                .attr('opacity', 0)
                .on('mousemove', (event) => {
                const year = XtoYEAR(event.x);
                // console.log({ x: event.x, year });
                d3.selectAll('rect.bars').attr('fill', (d) => {
                    if (year === d.key)
                        return '#B0CCF8';
                    return colourBars(d);
                });
            })
                .on('mouseout', () => {
                d3.selectAll('rect.bars').attr('fill', (d) => colourBars(d));
            })
                .on('click', (event) => {
                const year = XtoYEAR(event.x);
                const xAxisValue = YEARtoX(year) + YEARtoX.bandwidth() / 2;
                const newValue = {
                    x: xAxisValue,
                    y: height
                };
                yearBalls = [newValue, newValue];
                yearPicker
                    .data(yearBalls)
                    .select('circle')
                    .transition()
                    .ease(d3.easeQuadOut)
                    .duration(550)
                    .attr('cx', (d) => d.x);
                controlsLayer
                    .select('path.blueline')
                    .transition()
                    .ease(d3.easeQuadOut)
                    .duration(550)
                    .attr('d', d3.line()(yearBalls.map((d) => [d.x, d.y])));
                yearPicker
                    .selectAll('text')
                    .transition()
                    .ease(d3.easeQuadOut)
                    .duration(550)
                    .attr('x', () => xAxisValue)
                    .text(() => {
                    const startYear = year;
                    if (innerRange)
                        return YEARtoRANGE(startYear);
                    return startYear;
                });
                g.selectAll('rect.bars').attr('fill', (d) => colourBars(d));
                this.emit('rangeselected', getSelectedRange());
            });
            controlsLayer // gray line
                .append('path')
                .attr('class', 'grayline')
                .attr('d', d3.line()([
                [0, height],
                [width, height]
            ]))
                .attr('stroke-width', 2)
                .attr('opacity', 1)
                .attr('stroke', '#C1C5C7');
            controlsLayer // blue line
                .append('path')
                .attr('class', 'blueline')
                .attr('d', d3.line()(yearBalls.map((d) => [d.x, d.y])))
                .attr('stroke-width', 2)
                .attr('stroke', colours.accent);
            const yearPicker = controlsLayer
                .selectAll('g.yearpicker')
                .data(yearBalls)
                .join('g')
                .attr('class', 'yearpicker');
            /**
             * Animate the elements while the user is dragging one of the range selectors
             */
            function draggingUpdate(event, data) {
                const year = XtoYEAR(event.sourceEvent.x);
                const xAxisValue = YEARtoX(year) + YEARtoX.bandwidth() / 2;
                const yb = [];
                g.selectAll('circle').each(function setBallPosition() {
                    yb.push({ x: d3.select(this).attr('cx'), y: height });
                });
                yearBalls = yb;
                // move the circle
                d3.select(this)
                    .select('circle')
                    .attr('cx', data.x = xAxisValue);
                // move the blue line
                controlsLayer
                    .select('path.blueline')
                    .attr('d', d3.line()(yearBalls.map((d) => [d.x, d.y])));
                // change the text
                d3.select(this)
                    .selectAll('text')
                    .attr('x', () => xAxisValue)
                    .text(() => {
                    const startYear = year;
                    if (innerRange)
                        return YEARtoRANGE(startYear);
                    return startYear;
                });
                // colour the bars
                g.selectAll('rect.bars').attr('fill', (d) => colourBars(d));
            }
            yearPicker // drag handler
                .call(d3.drag()
                .on('drag', draggingUpdate)
                .on('end', (event, data) => {
                // update one last time to prevent desyncing
                draggingUpdate(event, data);
                // emit the selected range
                this.emit('rangeselected', getSelectedRange());
            }));
            yearPicker
                .append('circle')
                .attr('cx', (d) => d.x)
                .attr('cy', (d) => d.y)
                .attr('r', 9)
                .attr('fill', 'white')
                .attr('stroke-width', 2)
                .attr('stroke', colours.accent)
                .attr('style', 'cursor: pointer');
            yearPicker
                .attr('text-anchor', 'middle')
                .attr('font-family', 'Roboto, Arial, sans-serif')
                .attr('font-size', '12px')
                .append('text')
                .attr('y', (d) => d.y + margin.bottom / 2)
                .attr('x', (d) => d.x)
                .attr('fill', colours.accent)
                .text((d) => {
                const startYear = XtoYEAR(d.x);
                if (innerRange)
                    return YEARtoRANGE(startYear);
                return startYear;
            });
        };
    }
    ngAfterContentChecked() {
        /*
         Waits for the dom to be loaded, then fires the draw function
         that renders the chart.
        */
        if (this.data) {
            if (this._loaded)
                return;
            this._loaded = true;
            setTimeout(() => {
                import('d3').then((module) => {
                    this.d3 = module;
                    this.draw();
                    if (this.data && this.data.setDraw) {
                        this.data.setDraw(this.draw);
                    }
                });
            });
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], HistogramRangeComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], HistogramRangeComponent.prototype, "emit", void 0);
HistogramRangeComponent = __decorate([
    Component({
        selector: 'n7-histogram-range',
        template: "<div *ngIf=\"data\" class=\"n7-histogram-range\">\r\n    <svg #histogramRange [id]=\"data.containerId\"></svg>\r\n</div>\r\n"
    })
], HistogramRangeComponent);
export { HistogramRangeComponent };
//# sourceMappingURL=data:application/json;base64,