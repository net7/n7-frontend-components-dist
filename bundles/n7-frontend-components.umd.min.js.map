{"version":3,"sources":["ng://@n7-frontend/components/lib/components/breadcrumbs/breadcrumbs.ts","ng://@n7-frontend/components/lib/components/loader/loader.ts","ng://@n7-frontend/components/lib/components/table/table.ts","ng://@n7-frontend/components/lib/components/tag/tag.ts","ng://@n7-frontend/components/lib/dv-components-lib.module.ts","ng://@n7-frontend/components/lib/components/breadcrumbs/breadcrumbs.mock.ts","ng://@n7-frontend/components/lib/components/loader/loader.mock.ts","ng://@n7-frontend/components/lib/components/table/table.mock.ts","ng://@n7-frontend/components/lib/components/tag/tag.mock.ts"],"names":["BreadcrumbsComponent","prototype","onClick","payload","this","emit","Component","args","selector","template","Input","LoaderComponent","TableComponent","onCellClick","cell_payload","onCellDblClick","onInputTextChange","cell_value","textChange_payload","tc_payload","val","TagComponent","COMPONENTS","DvComponentsLibModule","NgModule","declarations","entryComponents","imports","CommonModule","exports","items","label","classes","head","cells","content","body","_meta","type","id","input_id","text","icon"],"mappings":"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","sourcesContent":["//---------------------------\n// BREADCRUMBS.ts\n//---------------------------\n\nimport { Component, Input } from '@angular/core';\n\nexport interface IBreadcrumbsItem {\n  label: string;\n  payload: any;\n  classes?: any;\n  _meta?: any;\n}\n\nexport interface IBreadcrumbsData {\n  items: IBreadcrumbsItem[];\n  classes?: any;\n}\n\n/**\n * BreadcrumbsComponent <n7-breadcrumbs>\n * \n * @example\n * ```html\n * \n * <!-- TODO: add component example -->\n * ```\n */\n\n@Component({\n  selector: 'n7-breadcrumbs',\n  templateUrl: './breadcrumbs.html'\n})\nexport class BreadcrumbsComponent {\n  @Input() data: IBreadcrumbsData;\n  @Input() emit: any;\n\n  onClick(payload){\n    if(!this.emit) return;\n    this.emit('click', payload);\n  }    \n}\n","//---------------------------\n// LOADER.ts\n//---------------------------\n\nimport {Component, Input} from '@angular/core';\n\n/**\n * Interface for LoaderComponent's \"data\"\n * \n * @property classes (optional)\n * @property _meta (optional)\n */\nexport interface ILoaderData {\n    /**\n     * additional html classes\n     */\n    classes?: string;\n    /**\n     * additional info\n     */\n    _meta?: any;\n}\n\n/**\n * LoaderComponent <n7-loader>\n * \n * @example\n * ```html\n * \n * <n7-loader [data]=\"{\n *          classes: 'animated-loader'\n *      }\">\n * </n7-loader>\n * ```\n */\n   \n@Component({\n    selector: 'n7-loader',\n    templateUrl: './loader.html'\n})\nexport class LoaderComponent {\n    @Input() public data: ILoaderData;\n}\n","//---------------------------\n// TABLE.ts\n//---------------------------\n\nimport { Component, Input } from '@angular/core';\n\n/**\n * Interface for row's cells\n * \n * @property content (required)\n * @property type (optional)\n * @property classes (optional)\n * @property payload (optional)\n * @property _meta (optional)\n */\nexport interface ICell {\n    /*\n     * inner html or hint for the input text, depending on \"type\"\n    */\n    content: any;\n    /**\n     * content type\n     */\n    type?: 'html' | 'input:text';   \n    /**\n     * additional html classes\n     */\n    classes?: string;\n    /**\n     * action click's payload\n     */\n    payload?: any;\n    /**\n     * additional info\n     */\n    _meta?: any;\n}\n\n/**\n * Interface for table's rows (head, body or foot rows)\n * \n * @property cells (required)\n * @property classes (optional)\n * @property payload (optional)\n * @property _meta (optional)\n */\nexport interface IRow {\n    /*\n     * row's cells\n    */\n    cells: ICell[];\n    /**\n     * additional html classes\n     */\n    classes?: string;\n    /**\n     * additional info\n     */\n    _meta?: any;\n}\n\n/**\n * Interface for TableComponent's \"data\"\n * \n * @property body (required)\n * @property head (optional)\n * @proprty foot (optional)\n * @property classes (optional)\n * @property payload (optional)\n * @property _meta (optional)\n */\nexport interface ITableData {\n    /**\n     * table's head\n     */\n    head?: IRow[];\n    /**\n     * table's body (the table its self)\n     */\n    body: IRow[];\n    /**\n     * table's foot\n     */\n    foot?: IRow[];\n    /**\n     * additional html classes\n     */\n    classes?: string;\n    /**\n     * additional info\n     */\n    _meta?: any;\n}\n\n/**\n * TableComponent <n7-table>\n */\n@Component({\n    selector: 'n7-table',\n    templateUrl: './table.html'\n})\nexport class TableComponent {\n    @Input() data: ITableData;\n    @Input() emit: any;\n\n\n    onCellClick(cell_payload) {\n        if (!this.emit) return;\n\n        this.emit('cellClick', cell_payload);\n    }\n\n    onCellDblClick(cell_payload) {\n        if (!this.emit) return;\n\n        this.emit('cellDblClick', cell_payload);\n    }\n\n    onInputTextChange(cell_payload, cell_value: string ) {  \n        if (!this.emit) return;\n\n        const textChange_payload = {tc_payload: cell_payload, val: cell_value};\n\n        this.emit('inputTextChange', textChange_payload);\n    }\n}\n","//---------------------------\n// TAG.ts\n//---------------------------\n\nimport { Component, Input } from '@angular/core';\n\n/**\n * Interface for TagComponent's \"data\"\n * \n * @property text (required)\n * @property label (optional)\n * @property icon (optional)\n * @property classes (optional)\n * @property payload (optional)\n * @property _meta (optional)\n * \n */\nexport interface ITagData {\n    /**\n     * tag's label\n     */\n    label?: string;\n    /**\n     * text visualized on the tag\n     */\n    text: string;\n    /**\n     * action icon (on right side)\n     */\n    icon?: string;\n    \n    /**\n     * additional html classes\n     */\n    classes?: string;\n    /**\n     * action click's payload\n     */\n    payload?: any;\n    /**\n     * additional info\n     */\n    _meta?: any;\n}\n\n/**\n * TagComponent <n7-tag>\n * \n * @example\n * ```html\n * \n * <n7-tag [data]=\"{\n *        label: 'label: ',\n *        text: 'text',\n *        icon: 'x',\n *        payload: 'tag-payload',\n *        classes: 'tag1-class'\n *    }\">\n * </n7-tag>\n * ```\n */\n@Component({\n    selector: 'n7-tag',\n    templateUrl: './tag.html'\n})\nexport class TagComponent  {\n    @Input() public data: ITagData;\n    @Input() public emit: any;\n\n    onClick(payload){\n        if (!this.emit) return;\n        this.emit(\"click\", payload);\n    }\n}","import { NgModule } from '@angular/core';\nimport { BreadcrumbsComponent } from './components/breadcrumbs/breadcrumbs';\nimport { CommonModule } from '@angular/common';\nimport { LoaderComponent } from './components/loader/loader';\nimport { TableComponent } from './components/table/table';\nimport { TagComponent } from './components/tag/tag';\n\nconst COMPONENTS = [\n  BreadcrumbsComponent,\n  LoaderComponent,\n  TableComponent,\n  TagComponent\n];\n\n@NgModule({\n    declarations: [\n        COMPONENTS,\n    ],\n    entryComponents: COMPONENTS,\n    imports: [CommonModule],\n    exports: [\n        COMPONENTS,\n    ],\n})\nexport class DvComponentsLibModule { }\n","import { IBreadcrumbsData } from './breadcrumbs';\n\nexport const BREADCRUMBS_MOCK: IBreadcrumbsData = {\n  items : [\n    {\n      label: 'Home',\n      payload: '/'\n    },\n    {\n      label: 'Costumi',\n      payload: '/examples/loader-component'\n    },\n    {\n      label: 'Giacche',\n      payload: '/examples/list-component'\n    },\n    {\n      label: 'Maniche',\n      payload: '/examples/navbar-component'\n    },\n    {\n      label: 'Manica',\n      payload: '/examples/breadcrumbs-component'\n    }\n  ]\n}\n","import { ILoaderData } from './loader';\n\nexport const LOADER_MOCK: ILoaderData = {\n  classes: 'loader-test'\n}","import { ITableData } from './table';\n\nexport const TABLE_MOCK: ITableData = {\n  classes: 'test-layout-table',\n  head: [\n          {\n              classes: 'HEADER',\n              cells: [\n                  {\n                      classes: 'CONTENT',\n                      content: 'DATA - ORA'\n                  },\n                  {\n                      classes: 'CONTENT',\n                      content: 'SEZIONE'\n                  },\n                  {\n                      classes: 'CONTENT',\n                      content: 'PARAMETRO'\n                  },\n                  {\n                      classes: 'CONTENT',\n                      content: 'VALORE'\n                  }\n              ]\n          }\n  ],\n  body: [\n      {   //first row\n          classes: 'BODY',\n          _meta: 'A',\n          cells: [\n              {\n                  classes: 'CONTENT',\n                  // _meta: '1x1',\n                  payload: 'B',\n                  content: '<span style=\"color:red;\">10/01/2019 - 10:23</span>',\n                  type: 'html'\n              },\n              {\n                  classes: 'CONTENT',\n                  // _meta: '1x2',\n                  content: 'Ingresso Industriale',\n                  type: 'html'\n              },\n              {\n                  classes: 'bold',\n                  // _meta: '1x3',\n                  content: '<span style=\"color:blue;\">&bullet;</span> N_NH4',\n                  type: 'html'\n              },\n              {\n                  content: '9 mg/l',\n                  // _meta: '1x4',\n                  type: 'html'\n              }\n          ]\n      },\n      {   //second row\n          classes: 'BODY',\n          _meta: 'B',\n          cells: [\n              {\n                  classes: 'CONTENT',\n                  _meta: '2x1',\n                  payload: 'C',\n                  content: '<span style=\"color:red;\">12/01/2019 - 20:54</span>',\n                  type: 'html'\n              },\n              {\n                  classes: 'CONTENT',\n                  _meta: '2x2',\n                  content: 'Ingresso Civile',\n                  type: 'html'\n              },\n              {\n                  classes: 'bold',\n                  _meta: '2x3',\n                  content: '<span style=\"color:purple;\">&bullet;</span> Ossigeno mg/l',\n                  type: 'html'\n              },\n              {\n                  content: '100 mg/l',\n                  _meta: {id:'2x4', input_id: '_text_input_2x4'},\n                  payload: {id:'2x4'},\n                  type: 'html'\n              }\n          ]\n      },\n      {   //third row\n          classes: 'BODY',\n          _meta: 'C',\n          cells: [\n              {\n                  classes: 'CONTENT',\n                  _meta: '3x1',\n                  payload: 'C',\n                  content: '<span style=\"color:red;\">9/01/2019 - 4:12</span>',\n                  type: 'html'\n              },\n              {\n                  classes: 'CONTENT',\n                  _meta: '3x2',\n                  content: 'Preaccumulo',\n                  type: 'html'\n              },\n              {\n                  classes: 'bold',\n                  _meta: '3x3',\n                  content: '<span style=\"color:purple;\">&bullet;</span> Ossigeno mg/l',\n                  type: 'html'//'altro'\n              },\n              {\n                  content: '100 mg/l',\n                  _meta: {id: '3x4', input_id: '_text_input_3x4'},\n                  payload: {id: '3x4'},\n                  type: 'input:text'\n              }\n          ]\n      },\n      {   //fourth row\n          classes: 'BODY',\n          _meta: 'D',\n          cells: [\n              {\n                  classes: 'CONTENT',\n                  _meta: '4x1',\n                  content: '8/01/2019 - 3:52',\n                  type: 'html'\n              },\n              {\n                  classes: 'CONTENT',\n                  _meta: '4x2',\n                  content: 'Preaccumulo',\n                  type: 'html'\n              },\n              {\n                  classes: 'bold',\n                  //_meta: '4x3',\n                  content: '<span style=\"color:green;\">&bullet;</span> Redox V',\n                  type: 'html'\n              },\n              {\n                  classes: 'input-test',\n                  content: '231 V',\n                  type: 'html',\n                  _meta: {id: 'NPT', input_id: '_text_input_NPT'},\n                  payload: {id:'NPT'}\n              }\n          ]\n      }\n  ]\n}","import { ITagData } from './tag';\n\nexport const TAG_MOCK: ITagData = {\n  label: \"label: \",\n  text: \"text\",\n  icon: \"x\",\n  payload: \"tag-payload\",\n  classes: \"tag1-class\",\n}"]}